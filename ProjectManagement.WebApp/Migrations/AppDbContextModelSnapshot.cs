// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectManagement.WebApp.Data;

#nullable disable

namespace ProjectManagement.WebApp.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("19fe6394-63c9-4c6b-b4ba-0081a864ac71"),
                            RoleId = new Guid("875ec79f-0081-4320-bbea-851c2de4fe24")
                        },
                        new
                        {
                            UserId = new Guid("33c511d8-05fe-41cf-934a-1f662d685458"),
                            RoleId = new Guid("ed3ac3ab-92f8-4a93-a45b-a25f0b4291c9")
                        },
                        new
                        {
                            UserId = new Guid("1d976577-2553-4c21-b1d9-681f31601d53"),
                            RoleId = new Guid("5d73cc5a-ace9-4b68-9679-435a9f778586")
                        },
                        new
                        {
                            UserId = new Guid("4ba66a92-d3bf-4321-b7a2-f9041635edb7"),
                            RoleId = new Guid("96e5a4de-0181-4008-83f0-11becab3ce9b")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Board", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Boards");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3fd76230-4287-460f-bcaf-6adffb1588a4"),
                            CreatedOn = new DateTime(2024, 5, 14, 20, 15, 1, 512, DateTimeKind.Local).AddTicks(349),
                            ProjectId = new Guid("db141a69-550e-41b6-8b05-6b96bbc401bf"),
                            Title = "Front-end board"
                        });
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.BoardUserAssociation", b =>
                {
                    b.Property<Guid>("BoardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BoardId", "AppUserId");

                    b.HasIndex("AppUserId");

                    b.ToTable("BoardUserAssociations");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Cost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Costs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c7035b83-34a8-4db8-9449-a280d1384db9"),
                            Amount = 500.00m,
                            CreatedOn = new DateTime(2024, 5, 14, 20, 15, 1, 512, DateTimeKind.Local).AddTicks(817),
                            Date = new DateTime(2024, 5, 14, 20, 15, 1, 512, DateTimeKind.Local).AddTicks(803),
                            Description = "Sample cost",
                            ProjectId = new Guid("6bee95c8-59ca-49f5-9a55-196eea3f3675")
                        },
                        new
                        {
                            Id = new Guid("ee6f1afd-788a-4ec0-954a-edc2e47c5ce0"),
                            Amount = 200.00m,
                            CreatedOn = new DateTime(2024, 5, 14, 20, 15, 1, 512, DateTimeKind.Local).AddTicks(867),
                            Date = new DateTime(2024, 5, 14, 20, 15, 1, 512, DateTimeKind.Local).AddTicks(867),
                            Description = "Sample cost",
                            ProjectId = new Guid("db141a69-550e-41b6-8b05-6b96bbc401bf")
                        });
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Dependency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DependsOnJobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("Dependencies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("db44dc7d-ed26-4822-8f69-8c228060a43c"),
                            CreatedOn = new DateTime(2024, 5, 14, 20, 15, 1, 512, DateTimeKind.Local).AddTicks(751),
                            DependsOnJobId = new Guid("7f2f5f8e-5f37-479e-9c15-a6612335caa3"),
                            JobId = new Guid("e756f68e-b3bb-471a-8545-09e3994824ec")
                        });
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AssignedTo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<Guid?>("StageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StageId");

                    b.ToTable("Jobs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5507f6d8-b8ca-4883-bb97-37525f04b14c"),
                            AssignedTo = "John Doe",
                            CreatedOn = new DateTime(2024, 5, 14, 20, 15, 1, 512, DateTimeKind.Local).AddTicks(642),
                            Description = "Design user interface for the blog site",
                            DueDate = new DateTime(2024, 5, 21, 20, 15, 1, 512, DateTimeKind.Local).AddTicks(638),
                            Priority = 1,
                            StageId = new Guid("a868a6c7-3177-46b2-9a60-910798bd12cc"),
                            StartDate = new DateTime(2024, 5, 14, 20, 15, 1, 512, DateTimeKind.Local).AddTicks(637),
                            Status = "ToDo",
                            Title = "Design UI"
                        },
                        new
                        {
                            Id = new Guid("7f2f5f8e-5f37-479e-9c15-a6612335caa3"),
                            AssignedTo = "John Doe",
                            CreatedOn = new DateTime(2024, 5, 14, 20, 15, 1, 512, DateTimeKind.Local).AddTicks(655),
                            Description = "Analyze requirements for the stock tracking project",
                            DueDate = new DateTime(2024, 5, 28, 20, 15, 1, 512, DateTimeKind.Local).AddTicks(654),
                            Priority = 2,
                            StageId = new Guid("1844ad5e-40e0-4b97-8637-4039e735e79e"),
                            StartDate = new DateTime(2024, 5, 14, 20, 15, 1, 512, DateTimeKind.Local).AddTicks(653),
                            Status = "InProgress",
                            Title = "Requirement Analysis"
                        },
                        new
                        {
                            Id = new Guid("e756f68e-b3bb-471a-8545-09e3994824ec"),
                            AssignedTo = "John Doe",
                            CreatedOn = new DateTime(2024, 5, 14, 20, 15, 1, 512, DateTimeKind.Local).AddTicks(659),
                            Description = "Depend job",
                            DueDate = new DateTime(2024, 5, 28, 20, 15, 1, 512, DateTimeKind.Local).AddTicks(658),
                            Priority = 2,
                            StageId = new Guid("1844ad5e-40e0-4b97-8637-4039e735e79e"),
                            StartDate = new DateTime(2024, 5, 14, 20, 15, 1, 512, DateTimeKind.Local).AddTicks(658),
                            Status = "Pending",
                            Title = "Depend job"
                        });
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.JobUserAssociation", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "JobId");

                    b.HasIndex("JobId");

                    b.ToTable("JobUserAssociations");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6bee95c8-59ca-49f5-9a55-196eea3f3675"),
                            CreatedOn = new DateTime(2024, 5, 14, 20, 15, 1, 511, DateTimeKind.Local).AddTicks(7838),
                            Description = "A project to create a blog site",
                            EndDate = new DateTime(2024, 6, 13, 20, 15, 1, 511, DateTimeKind.Local).AddTicks(7832),
                            ProjectName = "Blog Site Project",
                            StartDate = new DateTime(2024, 5, 14, 20, 15, 1, 511, DateTimeKind.Local).AddTicks(7831),
                            Status = "InProgress"
                        },
                        new
                        {
                            Id = new Guid("db141a69-550e-41b6-8b05-6b96bbc401bf"),
                            CreatedOn = new DateTime(2024, 5, 14, 20, 15, 1, 511, DateTimeKind.Local).AddTicks(7843),
                            Description = "A project to develop a stock tracking system",
                            EndDate = new DateTime(2024, 7, 13, 20, 15, 1, 511, DateTimeKind.Local).AddTicks(7842),
                            ProjectName = "Stock Tracking Project",
                            StartDate = new DateTime(2024, 5, 14, 20, 15, 1, 511, DateTimeKind.Local).AddTicks(7842),
                            Status = "Planning"
                        });
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.ProjectUserAssociation", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProjectId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectUserAssociations");

                    b.HasData(
                        new
                        {
                            ProjectId = new Guid("6bee95c8-59ca-49f5-9a55-196eea3f3675"),
                            UserId = new Guid("33c511d8-05fe-41cf-934a-1f662d685458")
                        },
                        new
                        {
                            ProjectId = new Guid("6bee95c8-59ca-49f5-9a55-196eea3f3675"),
                            UserId = new Guid("4ba66a92-d3bf-4321-b7a2-f9041635edb7")
                        },
                        new
                        {
                            ProjectId = new Guid("db141a69-550e-41b6-8b05-6b96bbc401bf"),
                            UserId = new Guid("33c511d8-05fe-41cf-934a-1f662d685458")
                        },
                        new
                        {
                            ProjectId = new Guid("db141a69-550e-41b6-8b05-6b96bbc401bf"),
                            UserId = new Guid("1d976577-2553-4c21-b1d9-681f31601d53")
                        });
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Stage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BoardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.ToTable("Stages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1844ad5e-40e0-4b97-8637-4039e735e79e"),
                            BoardId = new Guid("3fd76230-4287-460f-bcaf-6adffb1588a4"),
                            CreatedOn = new DateTime(2024, 5, 14, 20, 15, 1, 512, DateTimeKind.Local).AddTicks(570),
                            Description = "Design stage for the blog site project",
                            StageName = "Home Page"
                        },
                        new
                        {
                            Id = new Guid("a868a6c7-3177-46b2-9a60-910798bd12cc"),
                            BoardId = new Guid("3fd76230-4287-460f-bcaf-6adffb1588a4"),
                            CreatedOn = new DateTime(2024, 5, 14, 20, 15, 1, 512, DateTimeKind.Local).AddTicks(574),
                            Description = "Planning stage for the stock tracking project",
                            StageName = "Supplier Page"
                        });
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Identity.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("875ec79f-0081-4320-bbea-851c2de4fe24"),
                            CreatedOn = new DateTime(2024, 5, 14, 20, 15, 1, 203, DateTimeKind.Local).AddTicks(6721),
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("ed3ac3ab-92f8-4a93-a45b-a25f0b4291c9"),
                            CreatedOn = new DateTime(2024, 5, 14, 20, 15, 1, 203, DateTimeKind.Local).AddTicks(6733),
                            Name = "project-manager",
                            NormalizedName = "PROJECT-MANAGER"
                        },
                        new
                        {
                            Id = new Guid("5d73cc5a-ace9-4b68-9679-435a9f778586"),
                            CreatedOn = new DateTime(2024, 5, 14, 20, 15, 1, 203, DateTimeKind.Local).AddTicks(6736),
                            Name = "user",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = new Guid("96e5a4de-0181-4008-83f0-11becab3ce9b"),
                            CreatedOn = new DateTime(2024, 5, 14, 20, 15, 1, 203, DateTimeKind.Local).AddTicks(6738),
                            Name = "project-user",
                            NormalizedName = "PROJECT-USER"
                        });
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Identity.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("19fe6394-63c9-4c6b-b4ba-0081a864ac71"),
                            AccessFailedCount = 0,
                            BirthDay = new DateTime(2024, 5, 14, 20, 15, 1, 203, DateTimeKind.Local).AddTicks(6954),
                            ConcurrencyStamp = "5d28fcd9-edfd-4805-8110-69e7689454cc",
                            CreatedOn = new DateTime(2024, 5, 14, 20, 15, 1, 203, DateTimeKind.Local).AddTicks(6955),
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Furkan",
                            Gender = 1,
                            LastName = "Aydin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEO/CWQMy5Sf6NeZ20e3JNgjVLa+XxwpN0cvcVIimkuyo8yxSssZKZL++SgxEaUT78w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6283a492-684d-4f77-8335-8839bf1bf2fd",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("33c511d8-05fe-41cf-934a-1f662d685458"),
                            AccessFailedCount = 0,
                            BirthDay = new DateTime(2024, 5, 14, 20, 15, 1, 203, DateTimeKind.Local).AddTicks(6965),
                            ConcurrencyStamp = "411a419e-a00b-496a-80c6-cfdf01329584",
                            CreatedOn = new DateTime(2024, 5, 14, 20, 15, 1, 203, DateTimeKind.Local).AddTicks(6965),
                            Email = "aliyildiz@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ali",
                            Gender = 1,
                            LastName = "Yildiz ",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALIYILDIZ@GMAIL.COM",
                            NormalizedUserName = "ALIYILDIZ123",
                            PasswordHash = "AQAAAAIAAYagAAAAEHgFZK6ZcBqB5CDBnYGuHvcjdt46B3f1eWFGWUxZg7Z0nBJYPL7gicsk16vQOl1E6g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c6a12ad0-1fac-4243-ac29-8c4c96554e08",
                            TwoFactorEnabled = false,
                            UserName = "aliyildiz123"
                        },
                        new
                        {
                            Id = new Guid("1d976577-2553-4c21-b1d9-681f31601d53"),
                            AccessFailedCount = 0,
                            BirthDay = new DateTime(2024, 5, 14, 20, 15, 1, 203, DateTimeKind.Local).AddTicks(6971),
                            ConcurrencyStamp = "cecb6f4a-7709-4ee9-9c77-5dfce00faa97",
                            CreatedOn = new DateTime(2024, 5, 14, 20, 15, 1, 203, DateTimeKind.Local).AddTicks(6972),
                            Email = "ayseyildiz@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ayse",
                            Gender = 2,
                            LastName = "Yildiz",
                            LockoutEnabled = false,
                            NormalizedEmail = "AYSEYILDIZ@GMAIL.COM",
                            NormalizedUserName = "AYSEYILDIZ123",
                            PasswordHash = "AQAAAAIAAYagAAAAEAA1yBP6BlvkpcP3xykXdoCYc5zAXXPrExr+E6mnE7clXsuBO9J/ADfk2t4sNfWY1Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e7ea7f1a-d5c0-4654-b1f9-1fc1b119a517",
                            TwoFactorEnabled = false,
                            UserName = "ayseyildiz123"
                        },
                        new
                        {
                            Id = new Guid("4ba66a92-d3bf-4321-b7a2-f9041635edb7"),
                            AccessFailedCount = 0,
                            BirthDay = new DateTime(2024, 5, 14, 20, 15, 1, 203, DateTimeKind.Local).AddTicks(6977),
                            ConcurrencyStamp = "5a0adf21-48ce-4153-9bfb-eabdb956894b",
                            CreatedOn = new DateTime(2024, 5, 14, 20, 15, 1, 203, DateTimeKind.Local).AddTicks(6978),
                            Email = "esrefyildiz@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Esref",
                            Gender = 2,
                            LastName = "Yildiz",
                            LockoutEnabled = false,
                            NormalizedEmail = "ESREFYILDIZ@GMAIL.COM",
                            NormalizedUserName = "ESREFYILDIZ123",
                            PasswordHash = "AQAAAAIAAYagAAAAEPwRXppIwx9ReqebiJcfXN4S1ptl9qsmo6EBFmXnXAD8T6yMysnnKACpGTl7fE7Erw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "66c93748-fd2e-4c28-8d97-85e1dfbaa080",
                            TwoFactorEnabled = false,
                            UserName = "esrefyildiz123"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.WebApp.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Board", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Entities.Project", "Project")
                        .WithMany("boards")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.BoardUserAssociation", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Identity.AppUser", "AppUser")
                        .WithMany("Boards")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.WebApp.Models.Entities.Board", "Board")
                        .WithMany("Users")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Board");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Cost", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Entities.Project", "Project")
                        .WithMany("Costs")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Dependency", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Entities.Job", "Job")
                        .WithMany("Dependencies")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Job", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Entities.Stage", "Stage")
                        .WithMany("Jobs")
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.JobUserAssociation", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Entities.Job", "Job")
                        .WithMany("Users")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.WebApp.Models.Identity.AppUser", "User")
                        .WithMany("Jobs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.ProjectUserAssociation", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Entities.Project", "Project")
                        .WithMany("Users")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.WebApp.Models.Identity.AppUser", "User")
                        .WithMany("Projects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Stage", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Entities.Board", "Board")
                        .WithMany("Stages")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Board");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Board", b =>
                {
                    b.Navigation("Stages");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Job", b =>
                {
                    b.Navigation("Dependencies");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Project", b =>
                {
                    b.Navigation("Costs");

                    b.Navigation("Users");

                    b.Navigation("boards");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Stage", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Identity.AppUser", b =>
                {
                    b.Navigation("Boards");

                    b.Navigation("Jobs");

                    b.Navigation("Projects");
                });
#pragma warning restore 612, 618
        }
    }
}
