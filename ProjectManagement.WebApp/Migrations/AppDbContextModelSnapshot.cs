// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectManagement.WebApp.Data;

#nullable disable

namespace ProjectManagement.WebApp.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("655a0904-4cd2-493f-9aa0-c9ed9dff1312"),
                            RoleId = new Guid("94d3c7f4-a23a-4b67-8f66-4265d08dab6f")
                        },
                        new
                        {
                            UserId = new Guid("b2eff7ac-6381-4a7a-8e42-54c5dbb8d312"),
                            RoleId = new Guid("0558e2ce-7c3c-4f4e-900e-c46819de108d")
                        },
                        new
                        {
                            UserId = new Guid("aad030d4-6578-44b2-bffa-d0616abdb45c"),
                            RoleId = new Guid("65425581-71e8-40de-a852-3ea5ce0032a5")
                        },
                        new
                        {
                            UserId = new Guid("89e482fd-3289-41ce-ae7a-35bad31c1c7c"),
                            RoleId = new Guid("e9045d95-a2f8-4e8c-9039-6187fc100ac0")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Board", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Boards");

                    b.HasData(
                        new
                        {
                            Id = new Guid("813e33b6-b648-4ac0-8e45-85dd3ac2841c"),
                            CreatedOn = new DateTime(2024, 5, 27, 21, 7, 42, 932, DateTimeKind.Local).AddTicks(4274),
                            ProjectId = new Guid("52f1292d-18eb-48df-a22e-7fd0afe30831"),
                            Title = "Front-end board"
                        },
                        new
                        {
                            Id = new Guid("5f5337e0-a0e8-43de-b9a7-bcad47b753c0"),
                            CreatedOn = new DateTime(2024, 5, 27, 21, 7, 42, 932, DateTimeKind.Local).AddTicks(4280),
                            ProjectId = new Guid("52f1292d-18eb-48df-a22e-7fd0afe30831"),
                            Title = "Back-end board"
                        },
                        new
                        {
                            Id = new Guid("7a805655-e58a-4fb8-952d-9116359558ac"),
                            CreatedOn = new DateTime(2024, 5, 27, 21, 7, 42, 932, DateTimeKind.Local).AddTicks(4285),
                            ProjectId = new Guid("699e36ef-8d0c-4008-8c4c-8ffad20fa3d2"),
                            Title = "Analiz"
                        },
                        new
                        {
                            Id = new Guid("66b7f8f4-fb35-4a32-a4e7-541e16b28c05"),
                            CreatedOn = new DateTime(2024, 5, 27, 21, 7, 42, 932, DateTimeKind.Local).AddTicks(4290),
                            ProjectId = new Guid("699e36ef-8d0c-4008-8c4c-8ffad20fa3d2"),
                            Title = "Geliştirme"
                        });
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.BoardUserAssociation", b =>
                {
                    b.Property<Guid>("BoardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BoardId", "AppUserId");

                    b.HasIndex("AppUserId");

                    b.ToTable("BoardUserAssociations");

                    b.HasData(
                        new
                        {
                            BoardId = new Guid("813e33b6-b648-4ac0-8e45-85dd3ac2841c"),
                            AppUserId = new Guid("89e482fd-3289-41ce-ae7a-35bad31c1c7c")
                        },
                        new
                        {
                            BoardId = new Guid("813e33b6-b648-4ac0-8e45-85dd3ac2841c"),
                            AppUserId = new Guid("66674da9-980e-454f-8213-c6c919e3d457")
                        },
                        new
                        {
                            BoardId = new Guid("813e33b6-b648-4ac0-8e45-85dd3ac2841c"),
                            AppUserId = new Guid("105b6464-3f2c-452d-80b4-4563767eb06d")
                        });
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("SenderId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Cost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Costs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d1d77b0d-fd34-42a7-83ee-cc45fa6c258e"),
                            Amount = 500.00m,
                            CreatedOn = new DateTime(2024, 5, 27, 21, 7, 42, 932, DateTimeKind.Local).AddTicks(5028),
                            Date = new DateTime(2024, 5, 27, 21, 7, 42, 932, DateTimeKind.Local).AddTicks(5026),
                            Description = "Sample cost",
                            ProjectId = new Guid("691c1291-9124-4e83-b6f7-ff4b11b47f03")
                        },
                        new
                        {
                            Id = new Guid("b4fd3b14-de29-44a3-87f1-1094896ad434"),
                            Amount = 200.00m,
                            CreatedOn = new DateTime(2024, 5, 27, 21, 7, 42, 932, DateTimeKind.Local).AddTicks(5120),
                            Date = new DateTime(2024, 5, 27, 21, 7, 42, 932, DateTimeKind.Local).AddTicks(5119),
                            Description = "Sample cost",
                            ProjectId = new Guid("52f1292d-18eb-48df-a22e-7fd0afe30831")
                        });
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Dependency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DependsOnJobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("Dependencies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("be3e89b5-d0ae-4b39-8d62-876b6e1d7097"),
                            CreatedOn = new DateTime(2024, 5, 27, 21, 7, 42, 932, DateTimeKind.Local).AddTicks(4960),
                            DependsOnJobId = new Guid("c1e9bcfe-4fc5-4365-a82d-44ec32f569de"),
                            JobId = new Guid("20700244-3622-4e82-96d5-ccae594d79e7")
                        });
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<Guid?>("StageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StageId");

                    b.ToTable("Jobs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ecb1ac74-7d07-479a-ba2d-866424eeebb3"),
                            CreatedOn = new DateTime(2024, 5, 27, 21, 7, 42, 932, DateTimeKind.Local).AddTicks(4597),
                            Description = "Design user interface for the blog site",
                            DueDate = new DateTime(2024, 6, 3, 21, 7, 42, 932, DateTimeKind.Local).AddTicks(4593),
                            Priority = 0,
                            StageId = new Guid("ee9280c0-da7e-438d-8ecd-21daf862a877"),
                            StartDate = new DateTime(2024, 5, 27, 21, 7, 42, 932, DateTimeKind.Local).AddTicks(4592),
                            Title = "Design UI"
                        },
                        new
                        {
                            Id = new Guid("c1e9bcfe-4fc5-4365-a82d-44ec32f569de"),
                            CreatedOn = new DateTime(2024, 5, 27, 21, 7, 42, 932, DateTimeKind.Local).AddTicks(4610),
                            Description = "Analyze requirements for the stock tracking project",
                            DueDate = new DateTime(2024, 6, 10, 21, 7, 42, 932, DateTimeKind.Local).AddTicks(4608),
                            Priority = 1,
                            StageId = new Guid("65755f17-8b0d-47ab-a29f-56684d91679a"),
                            StartDate = new DateTime(2024, 5, 27, 21, 7, 42, 932, DateTimeKind.Local).AddTicks(4607),
                            Title = "Requirement Analysis"
                        },
                        new
                        {
                            Id = new Guid("20700244-3622-4e82-96d5-ccae594d79e7"),
                            CreatedOn = new DateTime(2024, 5, 27, 21, 7, 42, 932, DateTimeKind.Local).AddTicks(4619),
                            Description = "Depend job",
                            DueDate = new DateTime(2024, 6, 10, 21, 7, 42, 932, DateTimeKind.Local).AddTicks(4618),
                            Priority = 2,
                            StageId = new Guid("65755f17-8b0d-47ab-a29f-56684d91679a"),
                            StartDate = new DateTime(2024, 5, 27, 21, 7, 42, 932, DateTimeKind.Local).AddTicks(4617),
                            Title = "Depend job"
                        },
                        new
                        {
                            Id = new Guid("66fe3391-5a73-4bc9-bfdc-2fbfa57cb182"),
                            CreatedOn = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Müşteri ile bir araya gelerek yazılım gereksinimlerinin detaylı bir şekilde incelenmesi",
                            DueDate = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = 1,
                            StageId = new Guid("e660d97f-aec5-4d9b-9f39-28d5777aa025"),
                            StartDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Müşteri toplantısı ve gereksinimlerin belirlenmesi"
                        },
                        new
                        {
                            Id = new Guid("558cfd99-24a0-42c7-8396-a325f2ea24db"),
                            CreatedOn = new DateTime(2024, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Yazılımın işlevsel gereksinimlerinin ayrıntılı bir şekilde belirlenmesi",
                            DueDate = new DateTime(2024, 1, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = 0,
                            StageId = new Guid("e660d97f-aec5-4d9b-9f39-28d5777aa025"),
                            StartDate = new DateTime(2024, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Fonksiyonel gereksinimlerin belirlenmesi"
                        },
                        new
                        {
                            Id = new Guid("f9d56a2f-3b39-4d14-816e-680d13ec62dd"),
                            CreatedOn = new DateTime(2024, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Yazılımın prototipinin tasarlanması ve kullanıcı geri bildirimlerinin alınması",
                            DueDate = new DateTime(2024, 1, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = 2,
                            StageId = new Guid("6f128f72-b658-4419-b7e0-62997b51e1d9"),
                            StartDate = new DateTime(2024, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Prototip tasarımı"
                        },
                        new
                        {
                            Id = new Guid("db738ce5-9193-413e-9895-6eac2e486c79"),
                            CreatedOn = new DateTime(2024, 1, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Kullanıcı arayüzünün revize edilmesi ve geliştirilmiş bir versiyonunun hazırlanması",
                            DueDate = new DateTime(2024, 1, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = 2,
                            StageId = new Guid("6f128f72-b658-4419-b7e0-62997b51e1d9"),
                            StartDate = new DateTime(2024, 1, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Arayüz tasarım revizyonu"
                        },
                        new
                        {
                            Id = new Guid("82737806-25cf-4e2e-9295-951a5c12b0ea"),
                            CreatedOn = new DateTime(2024, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Yazılımın arka uç (backend) API'larının geliştirilmesi ve test edilmesi",
                            DueDate = new DateTime(2024, 1, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = 2,
                            StageId = new Guid("1dc8baef-f113-4da4-92ca-bd9f0b1c66e3"),
                            StartDate = new DateTime(2024, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Backend API geliştirme"
                        },
                        new
                        {
                            Id = new Guid("62831d4e-bb33-426c-a36d-20b6e99924b7"),
                            CreatedOn = new DateTime(2024, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Kullanıcı arayüzünün ön uç (frontend) bileşenlerinin geliştirilmesi ve entegrasyon testlerinin yapılması",
                            DueDate = new DateTime(2024, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = 1,
                            StageId = new Guid("1dc8baef-f113-4da4-92ca-bd9f0b1c66e3"),
                            StartDate = new DateTime(2024, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Frontend komponent geliştirme"
                        },
                        new
                        {
                            Id = new Guid("f874fdb7-b8d0-43cb-8d3f-d2d250bba44b"),
                            CreatedOn = new DateTime(2024, 1, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Yazılımın test edilmesi için birinci aşama test senaryolarının hazırlanması",
                            DueDate = new DateTime(2024, 1, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = 0,
                            StageId = new Guid("2671d8c9-420a-4051-999d-4e089a70b976"),
                            StartDate = new DateTime(2024, 1, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Birinci aşama test senaryolarının hazırlanması"
                        },
                        new
                        {
                            Id = new Guid("65741ce5-b798-4a8a-bdf2-71b7d53e01ac"),
                            CreatedOn = new DateTime(2024, 1, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Yazılımın farklı bileşenlerinin bir araya getirilerek sistem entegrasyon testlerinin yapılması",
                            DueDate = new DateTime(2024, 1, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = 1,
                            StageId = new Guid("2671d8c9-420a-4051-999d-4e089a70b976"),
                            StartDate = new DateTime(2024, 1, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Sistem entegrasyon testlerinin yapılması"
                        },
                        new
                        {
                            Id = new Guid("b16e3796-db53-4a80-82e3-e1aafb6b709b"),
                            CreatedOn = new DateTime(2024, 5, 27, 21, 7, 42, 932, DateTimeKind.Local).AddTicks(4773),
                            Description = "Mevcut sistem ve iş süreçlerinin detaylı bir şekilde incelenmesi",
                            DueDate = new DateTime(2024, 1, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = 1,
                            StageId = new Guid("e660d97f-aec5-4d9b-9f39-28d5777aa025"),
                            StartDate = new DateTime(2024, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Mevcut sistem analizi"
                        },
                        new
                        {
                            Id = new Guid("d1e9dd41-aa65-4b54-bcb5-30460b1a7236"),
                            CreatedOn = new DateTime(2024, 5, 27, 21, 7, 42, 932, DateTimeKind.Local).AddTicks(4786),
                            Description = "Müşteri gereksinimlerinin toplanması ve analiz edilmesi",
                            DueDate = new DateTime(2024, 1, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = 0,
                            StageId = new Guid("e660d97f-aec5-4d9b-9f39-28d5777aa025"),
                            StartDate = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Müşteri ihtiyaçlarının belirlenmesi"
                        },
                        new
                        {
                            Id = new Guid("32c7a1b5-7727-4186-a0ec-59306f9764a4"),
                            CreatedOn = new DateTime(2024, 5, 27, 21, 7, 42, 932, DateTimeKind.Local).AddTicks(4793),
                            Description = "Yapılan analiz çalışmalarının sonuçlarının detaylı bir şekilde dokümante edilmesi",
                            DueDate = new DateTime(2024, 1, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = 0,
                            StageId = new Guid("e660d97f-aec5-4d9b-9f39-28d5777aa025"),
                            StartDate = new DateTime(2024, 1, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Analiz sonuçlarının dokümantasyonu"
                        },
                        new
                        {
                            Id = new Guid("b3901f80-643e-4dfd-845d-c449bb11c7fd"),
                            CreatedOn = new DateTime(2024, 5, 27, 21, 7, 42, 932, DateTimeKind.Local).AddTicks(4799),
                            Description = "Yazılımın kullanıcı arayüzü tasarımının ilk mockup'ları oluşturulması",
                            DueDate = new DateTime(2024, 1, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = 1,
                            StageId = new Guid("6f128f72-b658-4419-b7e0-62997b51e1d9"),
                            StartDate = new DateTime(2024, 1, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Kullanıcı arayüzünün mockup'larının hazırlanması"
                        },
                        new
                        {
                            Id = new Guid("bc347b93-7c21-4a2f-8fdb-f0b9d4497186"),
                            CreatedOn = new DateTime(2024, 5, 27, 21, 7, 42, 932, DateTimeKind.Local).AddTicks(4806),
                            Description = "Kullanılacak renklerin ve renk paletinin belirlenmesi",
                            DueDate = new DateTime(2024, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = 2,
                            StageId = new Guid("6f128f72-b658-4419-b7e0-62997b51e1d9"),
                            StartDate = new DateTime(2024, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Arayüz tasarımı için renk paletinin belirlenmesi"
                        },
                        new
                        {
                            Id = new Guid("7bbd51d7-a128-4c55-9a7b-3d91331dabf0"),
                            CreatedOn = new DateTime(2024, 5, 27, 21, 7, 42, 932, DateTimeKind.Local).AddTicks(4812),
                            Description = "Kullanıcı arayüzünün kullanılabilirliğinin test edilmesi ve geri bildirimlerin alınması",
                            DueDate = new DateTime(2024, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = 2,
                            StageId = new Guid("6f128f72-b658-4419-b7e0-62997b51e1d9"),
                            StartDate = new DateTime(2024, 1, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Arayüzün kullanılabilirlik testlerinin yapılması"
                        },
                        new
                        {
                            Id = new Guid("cff4aa72-a546-41c6-bad6-25fe352b7af6"),
                            CreatedOn = new DateTime(2024, 5, 27, 21, 7, 42, 932, DateTimeKind.Local).AddTicks(4819),
                            Description = "Tasarım aşamasında alınan geri bildirimler doğrultusunda gerekli revizyonların yapılması",
                            DueDate = new DateTime(2024, 1, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = 2,
                            StageId = new Guid("6f128f72-b658-4419-b7e0-62997b51e1d9"),
                            StartDate = new DateTime(2024, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Tasarım revizyonu"
                        },
                        new
                        {
                            Id = new Guid("64a99c55-398c-4dba-a237-9ebcdd0846fb"),
                            CreatedOn = new DateTime(2024, 5, 27, 21, 7, 42, 932, DateTimeKind.Local).AddTicks(4825),
                            Description = "Kullanıcı arayüzünde kullanılacak animasyonların hazırlanması ve uygulanması",
                            DueDate = new DateTime(2024, 1, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = 2,
                            StageId = new Guid("6f128f72-b658-4419-b7e0-62997b51e1d9"),
                            StartDate = new DateTime(2024, 1, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Arayüz animasyonlarının hazırlanması"
                        });
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.JobUserAssociation", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "JobId");

                    b.HasIndex("JobId");

                    b.ToTable("JobUserAssociations");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = new Guid("691c1291-9124-4e83-b6f7-ff4b11b47f03"),
                            CreatedOn = new DateTime(2024, 5, 27, 21, 7, 42, 932, DateTimeKind.Local).AddTicks(3763),
                            Description = "A project to create a blog site",
                            EndDate = new DateTime(2024, 6, 26, 21, 7, 42, 932, DateTimeKind.Local).AddTicks(3753),
                            ProjectName = "Blog Site Project",
                            StartDate = new DateTime(2024, 5, 27, 21, 7, 42, 932, DateTimeKind.Local).AddTicks(3751)
                        },
                        new
                        {
                            Id = new Guid("52f1292d-18eb-48df-a22e-7fd0afe30831"),
                            CreatedOn = new DateTime(2024, 5, 27, 21, 7, 42, 932, DateTimeKind.Local).AddTicks(3773),
                            Description = "A project to develop a stock tracking system",
                            EndDate = new DateTime(2024, 7, 26, 21, 7, 42, 932, DateTimeKind.Local).AddTicks(3771),
                            ProjectName = "Stock Tracking Project",
                            StartDate = new DateTime(2024, 5, 27, 21, 7, 42, 932, DateTimeKind.Local).AddTicks(3770)
                        },
                        new
                        {
                            Id = new Guid("699e36ef-8d0c-4008-8c4c-8ffad20fa3d2"),
                            CreatedOn = new DateTime(2024, 5, 27, 21, 7, 42, 932, DateTimeKind.Local).AddTicks(3782),
                            Description = "Bir yazılım ürününün geliştirilmesi",
                            EndDate = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProjectName = "Yazılım Projesi",
                            StartDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("729d735a-e2a6-462d-acb0-ce02ea5b7c27"),
                            CreatedOn = new DateTime(2024, 5, 27, 21, 7, 42, 932, DateTimeKind.Local).AddTicks(3794),
                            Description = "Yeni bir ürünün pazarlama stratejisinin oluşturulması",
                            EndDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProjectName = "Pazarlama Kampanyası",
                            StartDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("e8c3f28d-b909-42f0-8135-a4020cda13aa"),
                            CreatedOn = new DateTime(2024, 5, 27, 21, 7, 42, 932, DateTimeKind.Local).AddTicks(3801),
                            Description = "Yeni bir ürünün tasarım sürecinin yürütülmesi",
                            EndDate = new DateTime(2024, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProjectName = "Yeni Ürün Tasarımı",
                            StartDate = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.ProjectUserAssociation", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProjectId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectUserAssociations");

                    b.HasData(
                        new
                        {
                            ProjectId = new Guid("691c1291-9124-4e83-b6f7-ff4b11b47f03"),
                            UserId = new Guid("b2eff7ac-6381-4a7a-8e42-54c5dbb8d312")
                        },
                        new
                        {
                            ProjectId = new Guid("52f1292d-18eb-48df-a22e-7fd0afe30831"),
                            UserId = new Guid("89e482fd-3289-41ce-ae7a-35bad31c1c7c")
                        },
                        new
                        {
                            ProjectId = new Guid("52f1292d-18eb-48df-a22e-7fd0afe30831"),
                            UserId = new Guid("b2eff7ac-6381-4a7a-8e42-54c5dbb8d312")
                        },
                        new
                        {
                            ProjectId = new Guid("52f1292d-18eb-48df-a22e-7fd0afe30831"),
                            UserId = new Guid("aad030d4-6578-44b2-bffa-d0616abdb45c")
                        },
                        new
                        {
                            ProjectId = new Guid("52f1292d-18eb-48df-a22e-7fd0afe30831"),
                            UserId = new Guid("66674da9-980e-454f-8213-c6c919e3d457")
                        },
                        new
                        {
                            ProjectId = new Guid("52f1292d-18eb-48df-a22e-7fd0afe30831"),
                            UserId = new Guid("105b6464-3f2c-452d-80b4-4563767eb06d")
                        },
                        new
                        {
                            ProjectId = new Guid("699e36ef-8d0c-4008-8c4c-8ffad20fa3d2"),
                            UserId = new Guid("b2eff7ac-6381-4a7a-8e42-54c5dbb8d312")
                        },
                        new
                        {
                            ProjectId = new Guid("699e36ef-8d0c-4008-8c4c-8ffad20fa3d2"),
                            UserId = new Guid("66674da9-980e-454f-8213-c6c919e3d457")
                        });
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Stage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BoardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.ToTable("Stages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("65755f17-8b0d-47ab-a29f-56684d91679a"),
                            BoardId = new Guid("813e33b6-b648-4ac0-8e45-85dd3ac2841c"),
                            CreatedOn = new DateTime(2024, 5, 27, 21, 7, 42, 932, DateTimeKind.Local).AddTicks(4400),
                            Description = "Design stage for the blog site project",
                            StageName = "Home Page"
                        },
                        new
                        {
                            Id = new Guid("ee9280c0-da7e-438d-8ecd-21daf862a877"),
                            BoardId = new Guid("813e33b6-b648-4ac0-8e45-85dd3ac2841c"),
                            CreatedOn = new DateTime(2024, 5, 27, 21, 7, 42, 932, DateTimeKind.Local).AddTicks(4409),
                            Description = "Planning stage for the stock tracking project",
                            StageName = "Supplier Page"
                        },
                        new
                        {
                            Id = new Guid("e660d97f-aec5-4d9b-9f39-28d5777aa025"),
                            BoardId = new Guid("66b7f8f4-fb35-4a32-a4e7-541e16b28c05"),
                            CreatedOn = new DateTime(2024, 5, 27, 21, 7, 42, 932, DateTimeKind.Local).AddTicks(4420),
                            Description = "Geliştirme aşaması için analiz aşaması",
                            StageName = "Analiz"
                        },
                        new
                        {
                            Id = new Guid("6f128f72-b658-4419-b7e0-62997b51e1d9"),
                            BoardId = new Guid("66b7f8f4-fb35-4a32-a4e7-541e16b28c05"),
                            CreatedOn = new DateTime(2024, 5, 27, 21, 7, 42, 932, DateTimeKind.Local).AddTicks(4426),
                            Description = "Geliştirme aşaması için tasarım aşaması",
                            StageName = "Tasarım"
                        },
                        new
                        {
                            Id = new Guid("1dc8baef-f113-4da4-92ca-bd9f0b1c66e3"),
                            BoardId = new Guid("66b7f8f4-fb35-4a32-a4e7-541e16b28c05"),
                            CreatedOn = new DateTime(2024, 5, 27, 21, 7, 42, 932, DateTimeKind.Local).AddTicks(4430),
                            Description = "Geliştirme aşaması için kodlama aşaması",
                            StageName = "Kodlama"
                        },
                        new
                        {
                            Id = new Guid("2671d8c9-420a-4051-999d-4e089a70b976"),
                            BoardId = new Guid("66b7f8f4-fb35-4a32-a4e7-541e16b28c05"),
                            CreatedOn = new DateTime(2024, 5, 27, 21, 7, 42, 932, DateTimeKind.Local).AddTicks(4442),
                            Description = "Geliştirme aşaması için test aşaması",
                            StageName = "Test"
                        });
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.SubJob", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("bit");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("SubJobs");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Identity.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("94d3c7f4-a23a-4b67-8f66-4265d08dab6f"),
                            CreatedOn = new DateTime(2024, 5, 27, 21, 7, 42, 382, DateTimeKind.Local).AddTicks(8654),
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("0558e2ce-7c3c-4f4e-900e-c46819de108d"),
                            CreatedOn = new DateTime(2024, 5, 27, 21, 7, 42, 382, DateTimeKind.Local).AddTicks(8673),
                            Name = "project-manager",
                            NormalizedName = "PROJECT-MANAGER"
                        },
                        new
                        {
                            Id = new Guid("65425581-71e8-40de-a852-3ea5ce0032a5"),
                            CreatedOn = new DateTime(2024, 5, 27, 21, 7, 42, 382, DateTimeKind.Local).AddTicks(8684),
                            Name = "user",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = new Guid("e9045d95-a2f8-4e8c-9039-6187fc100ac0"),
                            CreatedOn = new DateTime(2024, 5, 27, 21, 7, 42, 382, DateTimeKind.Local).AddTicks(8686),
                            Name = "project-user",
                            NormalizedName = "PROJECT-USER"
                        });
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Identity.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("655a0904-4cd2-493f-9aa0-c9ed9dff1312"),
                            AccessFailedCount = 0,
                            BirthDay = new DateTime(2024, 5, 27, 21, 7, 42, 382, DateTimeKind.Local).AddTicks(8976),
                            ConcurrencyStamp = "9a874edf-5300-4172-a883-fcf61a24aea5",
                            CreatedOn = new DateTime(2024, 5, 27, 21, 7, 42, 382, DateTimeKind.Local).AddTicks(8977),
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Furkan",
                            Gender = 1,
                            LastName = "Aydin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAECPkeORCq9aUzgBWvO6ifdxh+Aofk4bg61xNM26asjHt8jhUPkyBg9IxGTrV8draPA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "72c50e59-062b-4685-ab3a-47fd100dbbf3",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("b2eff7ac-6381-4a7a-8e42-54c5dbb8d312"),
                            AccessFailedCount = 0,
                            BirthDay = new DateTime(2024, 5, 27, 21, 7, 42, 382, DateTimeKind.Local).AddTicks(8997),
                            ConcurrencyStamp = "409d03ef-dd28-4d05-92ac-da528fe922c9",
                            CreatedOn = new DateTime(2024, 5, 27, 21, 7, 42, 382, DateTimeKind.Local).AddTicks(8997),
                            Email = "aliyildiz@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ali",
                            Gender = 1,
                            LastName = "Yildiz ",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALIYILDIZ@GMAIL.COM",
                            NormalizedUserName = "ALIYILDIZ123",
                            PasswordHash = "AQAAAAIAAYagAAAAEIvgEUcrAVn/HgDHrL45PgQSoBcX9TfoM8+MvaauYHbDYr7GJWzzjcJXZk9uqwKe8A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "85dc24a6-5ede-46dd-9bcf-81a522b81e24",
                            TwoFactorEnabled = false,
                            UserName = "aliyildiz123"
                        },
                        new
                        {
                            Id = new Guid("aad030d4-6578-44b2-bffa-d0616abdb45c"),
                            AccessFailedCount = 0,
                            BirthDay = new DateTime(2024, 5, 27, 21, 7, 42, 382, DateTimeKind.Local).AddTicks(9005),
                            ConcurrencyStamp = "423627a8-aa86-4efc-85c8-a6790f1111cf",
                            CreatedOn = new DateTime(2024, 5, 27, 21, 7, 42, 382, DateTimeKind.Local).AddTicks(9005),
                            Email = "ayseyildiz@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ayse",
                            Gender = 2,
                            LastName = "Yildiz",
                            LockoutEnabled = false,
                            NormalizedEmail = "AYSEYILDIZ@GMAIL.COM",
                            NormalizedUserName = "AYSEYILDIZ123",
                            PasswordHash = "AQAAAAIAAYagAAAAENNRdSLMQv60yQ0fHvlh2o96xji/lULVJf2O6tbgOU1bvH/F/GTs8S5ABt59DgVfpg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9c2ea385-4c61-430e-b83e-059d26e30187",
                            TwoFactorEnabled = false,
                            UserName = "ayseyildiz123"
                        },
                        new
                        {
                            Id = new Guid("89e482fd-3289-41ce-ae7a-35bad31c1c7c"),
                            AccessFailedCount = 0,
                            BirthDay = new DateTime(2024, 5, 27, 21, 7, 42, 382, DateTimeKind.Local).AddTicks(9016),
                            ConcurrencyStamp = "e5ad6c55-079f-42e5-a006-2e4d631f6c82",
                            CreatedOn = new DateTime(2024, 5, 27, 21, 7, 42, 382, DateTimeKind.Local).AddTicks(9016),
                            Email = "esrefyildiz@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Esref",
                            Gender = 2,
                            LastName = "Yildiz",
                            LockoutEnabled = false,
                            NormalizedEmail = "ESREFYILDIZ@GMAIL.COM",
                            NormalizedUserName = "ESREFYILDIZ123",
                            PasswordHash = "AQAAAAIAAYagAAAAEL33gmjratdwHTdt3D7IqSZwmys9vk1U3UCFwOBONSi821eCJ16W+EI1Pr1xquDnAA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1575edf6-5051-4d3c-9371-ffce5fe32183",
                            TwoFactorEnabled = false,
                            UserName = "esrefyildiz123"
                        },
                        new
                        {
                            Id = new Guid("66674da9-980e-454f-8213-c6c919e3d457"),
                            AccessFailedCount = 0,
                            BirthDay = new DateTime(2024, 5, 27, 21, 7, 42, 382, DateTimeKind.Local).AddTicks(9023),
                            ConcurrencyStamp = "1fa5e29b-f761-4377-94b0-19a5f1f460bd",
                            CreatedOn = new DateTime(2024, 5, 27, 21, 7, 42, 382, DateTimeKind.Local).AddTicks(9023),
                            Email = "furkanaydin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Furkan",
                            Gender = 1,
                            LastName = "Aydin",
                            LockoutEnabled = false,
                            NormalizedEmail = "FURKANAYDIN@GMAIL.COM",
                            NormalizedUserName = "FURKANAYDIN123",
                            PasswordHash = "AQAAAAIAAYagAAAAEONreJPIu0PmDQ+uAqfzWm2Ic4bBC1rKZ6tkZC+/gix+dFFX2PvQgY/9quN8yCe5NQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "73c5ce33-2d28-4e57-a6a4-56594ecc6cb4",
                            TwoFactorEnabled = false,
                            UserName = "furkanaydin123"
                        },
                        new
                        {
                            Id = new Guid("105b6464-3f2c-452d-80b4-4563767eb06d"),
                            AccessFailedCount = 0,
                            BirthDay = new DateTime(2024, 5, 27, 21, 7, 42, 382, DateTimeKind.Local).AddTicks(9029),
                            ConcurrencyStamp = "4e7b7b00-5f29-49d4-8a4d-40027d4f071c",
                            CreatedOn = new DateTime(2024, 5, 27, 21, 7, 42, 382, DateTimeKind.Local).AddTicks(9030),
                            Email = "firatcanyanan@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Firat Can",
                            Gender = 1,
                            LastName = "Yanan",
                            LockoutEnabled = false,
                            NormalizedEmail = "FIRATCANYANAN@GMAIL.COM",
                            NormalizedUserName = "FIRATCANYANAN123",
                            PasswordHash = "AQAAAAIAAYagAAAAEOJTEPpt4boZnc4IJHOZEWgfSh7pVSZArH2xd1YwecPUbUj/zGoVSjyQus2/AvsQ5Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0b503e0b-b7e3-43f1-8981-dffd86405272",
                            TwoFactorEnabled = false,
                            UserName = "firatcanyanan123"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.WebApp.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Board", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Entities.Project", "Project")
                        .WithMany("boards")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.BoardUserAssociation", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Identity.AppUser", "AppUser")
                        .WithMany("Boards")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.WebApp.Models.Entities.Board", "Board")
                        .WithMany("Users")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Board");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Comment", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Entities.Job", "Job")
                        .WithMany("Comments")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.WebApp.Models.Identity.AppUser", "Sender")
                        .WithMany("Comments")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Job");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Cost", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Entities.Project", "Project")
                        .WithMany("Costs")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Dependency", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Entities.Job", "Job")
                        .WithMany("Dependencies")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Job", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Entities.Stage", "Stage")
                        .WithMany("Jobs")
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.JobUserAssociation", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Entities.Job", "Job")
                        .WithMany("Users")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.WebApp.Models.Identity.AppUser", "User")
                        .WithMany("Jobs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.ProjectUserAssociation", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Entities.Project", "Project")
                        .WithMany("Users")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.WebApp.Models.Identity.AppUser", "User")
                        .WithMany("Projects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Stage", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Entities.Board", "Board")
                        .WithMany("Stages")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Board");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.SubJob", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Entities.Job", "Job")
                        .WithMany("SubJobs")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Board", b =>
                {
                    b.Navigation("Stages");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Job", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Dependencies");

                    b.Navigation("SubJobs");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Project", b =>
                {
                    b.Navigation("Costs");

                    b.Navigation("Users");

                    b.Navigation("boards");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Stage", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Identity.AppUser", b =>
                {
                    b.Navigation("Boards");

                    b.Navigation("Comments");

                    b.Navigation("Jobs");

                    b.Navigation("Projects");
                });
#pragma warning restore 612, 618
        }
    }
}
