// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectManagement.WebApp.Data;

#nullable disable

namespace ProjectManagement.WebApp.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("7e1e388c-406f-41f7-a887-d9d3ebf8115c"),
                            RoleId = new Guid("219e3246-85e6-434b-996b-89b1622a11dc")
                        },
                        new
                        {
                            UserId = new Guid("a499d983-6a13-4f79-9164-3c5b6526904b"),
                            RoleId = new Guid("85ba69ed-8512-497c-8a74-e1bf9250fd3b")
                        },
                        new
                        {
                            UserId = new Guid("0a4e1516-cf00-4dd0-bda3-a7887288341a"),
                            RoleId = new Guid("50c62541-0e9f-4a87-a0c0-451e9cf5e978")
                        },
                        new
                        {
                            UserId = new Guid("e49ed8e2-81f1-48d0-b267-3fb03363ad6d"),
                            RoleId = new Guid("e45116ee-78c3-4aaa-b298-3369e7d38b03")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Board", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Boards");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1fb86ad4-2114-41bf-930b-c745136e1e93"),
                            CreatedOn = new DateTime(2024, 5, 22, 12, 17, 1, 799, DateTimeKind.Local).AddTicks(9564),
                            ProjectId = new Guid("3d5b3566-7a48-492c-bdb1-6f8aa9a78399"),
                            Title = "Front-end board"
                        },
                        new
                        {
                            Id = new Guid("62d2ab63-362c-4dd3-b10c-ba1292c2b5a1"),
                            CreatedOn = new DateTime(2024, 5, 22, 12, 17, 1, 799, DateTimeKind.Local).AddTicks(9568),
                            ProjectId = new Guid("3d5b3566-7a48-492c-bdb1-6f8aa9a78399"),
                            Title = "Back-end board"
                        });
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.BoardUserAssociation", b =>
                {
                    b.Property<Guid>("BoardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BoardId", "AppUserId");

                    b.HasIndex("AppUserId");

                    b.ToTable("BoardUserAssociations");

                    b.HasData(
                        new
                        {
                            BoardId = new Guid("1fb86ad4-2114-41bf-930b-c745136e1e93"),
                            AppUserId = new Guid("e49ed8e2-81f1-48d0-b267-3fb03363ad6d")
                        },
                        new
                        {
                            BoardId = new Guid("1fb86ad4-2114-41bf-930b-c745136e1e93"),
                            AppUserId = new Guid("ad362efa-1370-412f-8ba4-5239e656ed44")
                        },
                        new
                        {
                            BoardId = new Guid("1fb86ad4-2114-41bf-930b-c745136e1e93"),
                            AppUserId = new Guid("bec26585-1799-4174-8505-af3ecf7fb985")
                        });
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("SenderId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Cost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Costs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("873c4ef1-ffb4-416e-841c-f9e23f555c64"),
                            Amount = 500.00m,
                            CreatedOn = new DateTime(2024, 5, 22, 12, 17, 1, 800, DateTimeKind.Local).AddTicks(82),
                            Date = new DateTime(2024, 5, 22, 12, 17, 1, 800, DateTimeKind.Local).AddTicks(82),
                            Description = "Sample cost",
                            ProjectId = new Guid("28a4a276-ebd2-49d4-82ff-1f376e2f75d3")
                        },
                        new
                        {
                            Id = new Guid("a9d153f5-0de0-4c52-b6f8-f8869868abe9"),
                            Amount = 200.00m,
                            CreatedOn = new DateTime(2024, 5, 22, 12, 17, 1, 800, DateTimeKind.Local).AddTicks(183),
                            Date = new DateTime(2024, 5, 22, 12, 17, 1, 800, DateTimeKind.Local).AddTicks(182),
                            Description = "Sample cost",
                            ProjectId = new Guid("3d5b3566-7a48-492c-bdb1-6f8aa9a78399")
                        });
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Dependency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DependsOnJobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("Dependencies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("12d4713a-bed7-4aa5-beed-bce7604670e4"),
                            CreatedOn = new DateTime(2024, 5, 22, 12, 17, 1, 800, DateTimeKind.Local).AddTicks(36),
                            DependsOnJobId = new Guid("5ba51cc1-e57d-4d72-99c9-41ab7e481963"),
                            JobId = new Guid("afc20432-a348-46f7-bad0-3e1b7fc22c5b")
                        });
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<Guid?>("StageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StageId");

                    b.ToTable("Jobs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8f0b48e1-5909-44c4-834c-0833905e7368"),
                            CreatedOn = new DateTime(2024, 5, 22, 12, 17, 1, 799, DateTimeKind.Local).AddTicks(9949),
                            Description = "Design user interface for the blog site",
                            DueDate = new DateTime(2024, 5, 29, 12, 17, 1, 799, DateTimeKind.Local).AddTicks(9946),
                            Priority = 0,
                            StageId = new Guid("47503214-fd8f-4315-b161-4b78bd4d8d65"),
                            StartDate = new DateTime(2024, 5, 22, 12, 17, 1, 799, DateTimeKind.Local).AddTicks(9946),
                            Title = "Design UI"
                        },
                        new
                        {
                            Id = new Guid("5ba51cc1-e57d-4d72-99c9-41ab7e481963"),
                            CreatedOn = new DateTime(2024, 5, 22, 12, 17, 1, 799, DateTimeKind.Local).AddTicks(9958),
                            Description = "Analyze requirements for the stock tracking project",
                            DueDate = new DateTime(2024, 6, 5, 12, 17, 1, 799, DateTimeKind.Local).AddTicks(9957),
                            Priority = 1,
                            StageId = new Guid("8f3adfb2-8951-4123-a165-ce9fa1680fe5"),
                            StartDate = new DateTime(2024, 5, 22, 12, 17, 1, 799, DateTimeKind.Local).AddTicks(9956),
                            Title = "Requirement Analysis"
                        },
                        new
                        {
                            Id = new Guid("afc20432-a348-46f7-bad0-3e1b7fc22c5b"),
                            CreatedOn = new DateTime(2024, 5, 22, 12, 17, 1, 799, DateTimeKind.Local).AddTicks(9965),
                            Description = "Depend job",
                            DueDate = new DateTime(2024, 6, 5, 12, 17, 1, 799, DateTimeKind.Local).AddTicks(9964),
                            Priority = 2,
                            StageId = new Guid("8f3adfb2-8951-4123-a165-ce9fa1680fe5"),
                            StartDate = new DateTime(2024, 5, 22, 12, 17, 1, 799, DateTimeKind.Local).AddTicks(9962),
                            Title = "Depend job"
                        });
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.JobUserAssociation", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "JobId");

                    b.HasIndex("JobId");

                    b.ToTable("JobUserAssociations");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = new Guid("28a4a276-ebd2-49d4-82ff-1f376e2f75d3"),
                            CreatedOn = new DateTime(2024, 5, 22, 12, 17, 1, 799, DateTimeKind.Local).AddTicks(9291),
                            Description = "A project to create a blog site",
                            EndDate = new DateTime(2024, 6, 21, 12, 17, 1, 799, DateTimeKind.Local).AddTicks(9281),
                            ProjectName = "Blog Site Project",
                            StartDate = new DateTime(2024, 5, 22, 12, 17, 1, 799, DateTimeKind.Local).AddTicks(9279)
                        },
                        new
                        {
                            Id = new Guid("3d5b3566-7a48-492c-bdb1-6f8aa9a78399"),
                            CreatedOn = new DateTime(2024, 5, 22, 12, 17, 1, 799, DateTimeKind.Local).AddTicks(9301),
                            Description = "A project to develop a stock tracking system",
                            EndDate = new DateTime(2024, 7, 21, 12, 17, 1, 799, DateTimeKind.Local).AddTicks(9300),
                            ProjectName = "Stock Tracking Project",
                            StartDate = new DateTime(2024, 5, 22, 12, 17, 1, 799, DateTimeKind.Local).AddTicks(9299)
                        });
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.ProjectUserAssociation", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProjectId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectUserAssociations");

                    b.HasData(
                        new
                        {
                            ProjectId = new Guid("28a4a276-ebd2-49d4-82ff-1f376e2f75d3"),
                            UserId = new Guid("a499d983-6a13-4f79-9164-3c5b6526904b")
                        },
                        new
                        {
                            ProjectId = new Guid("3d5b3566-7a48-492c-bdb1-6f8aa9a78399"),
                            UserId = new Guid("e49ed8e2-81f1-48d0-b267-3fb03363ad6d")
                        },
                        new
                        {
                            ProjectId = new Guid("3d5b3566-7a48-492c-bdb1-6f8aa9a78399"),
                            UserId = new Guid("a499d983-6a13-4f79-9164-3c5b6526904b")
                        },
                        new
                        {
                            ProjectId = new Guid("3d5b3566-7a48-492c-bdb1-6f8aa9a78399"),
                            UserId = new Guid("0a4e1516-cf00-4dd0-bda3-a7887288341a")
                        },
                        new
                        {
                            ProjectId = new Guid("3d5b3566-7a48-492c-bdb1-6f8aa9a78399"),
                            UserId = new Guid("ad362efa-1370-412f-8ba4-5239e656ed44")
                        },
                        new
                        {
                            ProjectId = new Guid("3d5b3566-7a48-492c-bdb1-6f8aa9a78399"),
                            UserId = new Guid("bec26585-1799-4174-8505-af3ecf7fb985")
                        });
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Stage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BoardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.ToTable("Stages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8f3adfb2-8951-4123-a165-ce9fa1680fe5"),
                            BoardId = new Guid("1fb86ad4-2114-41bf-930b-c745136e1e93"),
                            CreatedOn = new DateTime(2024, 5, 22, 12, 17, 1, 799, DateTimeKind.Local).AddTicks(9632),
                            Description = "Design stage for the blog site project",
                            StageName = "Home Page"
                        },
                        new
                        {
                            Id = new Guid("47503214-fd8f-4315-b161-4b78bd4d8d65"),
                            BoardId = new Guid("1fb86ad4-2114-41bf-930b-c745136e1e93"),
                            CreatedOn = new DateTime(2024, 5, 22, 12, 17, 1, 799, DateTimeKind.Local).AddTicks(9636),
                            Description = "Planning stage for the stock tracking project",
                            StageName = "Supplier Page"
                        });
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Identity.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("219e3246-85e6-434b-996b-89b1622a11dc"),
                            CreatedOn = new DateTime(2024, 5, 22, 12, 17, 1, 119, DateTimeKind.Local).AddTicks(622),
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("85ba69ed-8512-497c-8a74-e1bf9250fd3b"),
                            CreatedOn = new DateTime(2024, 5, 22, 12, 17, 1, 119, DateTimeKind.Local).AddTicks(641),
                            Name = "project-manager",
                            NormalizedName = "PROJECT-MANAGER"
                        },
                        new
                        {
                            Id = new Guid("50c62541-0e9f-4a87-a0c0-451e9cf5e978"),
                            CreatedOn = new DateTime(2024, 5, 22, 12, 17, 1, 119, DateTimeKind.Local).AddTicks(644),
                            Name = "user",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = new Guid("e45116ee-78c3-4aaa-b298-3369e7d38b03"),
                            CreatedOn = new DateTime(2024, 5, 22, 12, 17, 1, 119, DateTimeKind.Local).AddTicks(647),
                            Name = "project-user",
                            NormalizedName = "PROJECT-USER"
                        });
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Identity.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("7e1e388c-406f-41f7-a887-d9d3ebf8115c"),
                            AccessFailedCount = 0,
                            BirthDay = new DateTime(2024, 5, 22, 12, 17, 1, 119, DateTimeKind.Local).AddTicks(1062),
                            ConcurrencyStamp = "e92bc29f-650e-4452-96d0-e7bfc11f0c12",
                            CreatedOn = new DateTime(2024, 5, 22, 12, 17, 1, 119, DateTimeKind.Local).AddTicks(1063),
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Furkan",
                            Gender = 1,
                            LastName = "Aydin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEOe0mt0Dfs/d0tFqUxbgkMBCkmXvOPUbUYJ77vFObA4wYInaLWLKEMMIuzgGzG/9Ww==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "70b2dd31-0133-434d-a707-cfaac553f864",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("a499d983-6a13-4f79-9164-3c5b6526904b"),
                            AccessFailedCount = 0,
                            BirthDay = new DateTime(2024, 5, 22, 12, 17, 1, 119, DateTimeKind.Local).AddTicks(1077),
                            ConcurrencyStamp = "5b5b8288-feb6-489d-8d20-decc881fc138",
                            CreatedOn = new DateTime(2024, 5, 22, 12, 17, 1, 119, DateTimeKind.Local).AddTicks(1078),
                            Email = "aliyildiz@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ali",
                            Gender = 1,
                            LastName = "Yildiz ",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALIYILDIZ@GMAIL.COM",
                            NormalizedUserName = "ALIYILDIZ123",
                            PasswordHash = "AQAAAAIAAYagAAAAEFOIeFzV5pZStCe4aP5EyX+QFnHg/UQsAxorIVEhHv/QzcOZopnh/Mdzx1x7nj+jlw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5c2eae45-4fc6-4d77-9550-996fef140d63",
                            TwoFactorEnabled = false,
                            UserName = "aliyildiz123"
                        },
                        new
                        {
                            Id = new Guid("0a4e1516-cf00-4dd0-bda3-a7887288341a"),
                            AccessFailedCount = 0,
                            BirthDay = new DateTime(2024, 5, 22, 12, 17, 1, 119, DateTimeKind.Local).AddTicks(1087),
                            ConcurrencyStamp = "f2d7cd7e-a2fb-4fa7-9f9c-de1077d8f65e",
                            CreatedOn = new DateTime(2024, 5, 22, 12, 17, 1, 119, DateTimeKind.Local).AddTicks(1088),
                            Email = "ayseyildiz@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ayse",
                            Gender = 2,
                            LastName = "Yildiz",
                            LockoutEnabled = false,
                            NormalizedEmail = "AYSEYILDIZ@GMAIL.COM",
                            NormalizedUserName = "AYSEYILDIZ123",
                            PasswordHash = "AQAAAAIAAYagAAAAEGjQ3SCA6sqalvtRJJBNQ7aeLYU0VRjyrsyO/rsz81Y7OKo3bjE01dpvBBaFzSEEbA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "89770733-d16c-410a-bc1b-1dd344382b3c",
                            TwoFactorEnabled = false,
                            UserName = "ayseyildiz123"
                        },
                        new
                        {
                            Id = new Guid("e49ed8e2-81f1-48d0-b267-3fb03363ad6d"),
                            AccessFailedCount = 0,
                            BirthDay = new DateTime(2024, 5, 22, 12, 17, 1, 119, DateTimeKind.Local).AddTicks(1101),
                            ConcurrencyStamp = "7a144d76-d3b3-47a7-9931-812c10676b70",
                            CreatedOn = new DateTime(2024, 5, 22, 12, 17, 1, 119, DateTimeKind.Local).AddTicks(1102),
                            Email = "esrefyildiz@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Esref",
                            Gender = 2,
                            LastName = "Yildiz",
                            LockoutEnabled = false,
                            NormalizedEmail = "ESREFYILDIZ@GMAIL.COM",
                            NormalizedUserName = "ESREFYILDIZ123",
                            PasswordHash = "AQAAAAIAAYagAAAAEGNlYKswHerhwmhRujWk57xA61mEWqX8z/lN8A3GjrKIX9MVqSqvo90K1tgoE+/NZQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "719b6588-4b6e-4675-a656-f94da7a4d251",
                            TwoFactorEnabled = false,
                            UserName = "esrefyildiz123"
                        },
                        new
                        {
                            Id = new Guid("ad362efa-1370-412f-8ba4-5239e656ed44"),
                            AccessFailedCount = 0,
                            BirthDay = new DateTime(2024, 5, 22, 12, 17, 1, 119, DateTimeKind.Local).AddTicks(1111),
                            ConcurrencyStamp = "d04a435e-5603-422f-8f4e-f1e8a128b040",
                            CreatedOn = new DateTime(2024, 5, 22, 12, 17, 1, 119, DateTimeKind.Local).AddTicks(1112),
                            Email = "furkanaydin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Furkan",
                            Gender = 1,
                            LastName = "Aydin",
                            LockoutEnabled = false,
                            NormalizedEmail = "FURKANAYDIN@GMAIL.COM",
                            NormalizedUserName = "FURKANAYDIN123",
                            PasswordHash = "AQAAAAIAAYagAAAAEFyu512wVjUuSE5GPNdjDLiZbgbf/+sLR8vLaHRvBlXhTwKaz/eFaiI6/CU8WJX7dw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "eb193e08-815e-46f6-866a-38645f3ea2ed",
                            TwoFactorEnabled = false,
                            UserName = "furkanaydin123"
                        },
                        new
                        {
                            Id = new Guid("bec26585-1799-4174-8505-af3ecf7fb985"),
                            AccessFailedCount = 0,
                            BirthDay = new DateTime(2024, 5, 22, 12, 17, 1, 119, DateTimeKind.Local).AddTicks(1121),
                            ConcurrencyStamp = "92a325a6-8343-4e15-8a16-113b0f8cd15e",
                            CreatedOn = new DateTime(2024, 5, 22, 12, 17, 1, 119, DateTimeKind.Local).AddTicks(1122),
                            Email = "firatcanyanan@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Firat Can",
                            Gender = 1,
                            LastName = "Yanan",
                            LockoutEnabled = false,
                            NormalizedEmail = "FIRATCANYANAN@GMAIL.COM",
                            NormalizedUserName = "FIRATCANYANAN123",
                            PasswordHash = "AQAAAAIAAYagAAAAEGbOQ/7pJ5Ll5Z8e9egOxBdiyoRZ6831irn43Xt0k1+rWpuOsGHWCHjllbIy8cpvew==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0c162bb3-4914-4c13-a18f-4c89dbbdef88",
                            TwoFactorEnabled = false,
                            UserName = "firatcanyanan123"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.WebApp.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Board", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Entities.Project", "Project")
                        .WithMany("boards")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.BoardUserAssociation", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Identity.AppUser", "AppUser")
                        .WithMany("Boards")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.WebApp.Models.Entities.Board", "Board")
                        .WithMany("Users")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Board");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Comment", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Entities.Job", "Job")
                        .WithMany("Comments")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.WebApp.Models.Identity.AppUser", "Sender")
                        .WithMany("Comments")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Job");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Cost", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Entities.Project", "Project")
                        .WithMany("Costs")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Dependency", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Entities.Job", "Job")
                        .WithMany("Dependencies")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Job", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Entities.Stage", "Stage")
                        .WithMany("Jobs")
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.JobUserAssociation", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Entities.Job", "Job")
                        .WithMany("Users")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.WebApp.Models.Identity.AppUser", "User")
                        .WithMany("Jobs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.ProjectUserAssociation", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Entities.Project", "Project")
                        .WithMany("Users")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.WebApp.Models.Identity.AppUser", "User")
                        .WithMany("Projects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Stage", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Entities.Board", "Board")
                        .WithMany("Stages")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Board");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Board", b =>
                {
                    b.Navigation("Stages");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Job", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Dependencies");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Project", b =>
                {
                    b.Navigation("Costs");

                    b.Navigation("Users");

                    b.Navigation("boards");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Stage", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Identity.AppUser", b =>
                {
                    b.Navigation("Boards");

                    b.Navigation("Comments");

                    b.Navigation("Jobs");

                    b.Navigation("Projects");
                });
#pragma warning restore 612, 618
        }
    }
}
