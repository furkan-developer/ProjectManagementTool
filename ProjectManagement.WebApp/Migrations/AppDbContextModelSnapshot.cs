// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectManagement.WebApp.Data;

#nullable disable

namespace ProjectManagement.WebApp.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("caae504f-65d9-4ccd-b6b6-8fc94c4fdfc0"),
                            RoleId = new Guid("86702504-a0c9-4c8f-af36-b6b4d454431a")
                        },
                        new
                        {
                            UserId = new Guid("11cd88fe-4611-4cc2-beff-39359a285452"),
                            RoleId = new Guid("7415fe13-f632-4281-acb0-443ac83b42b8")
                        },
                        new
                        {
                            UserId = new Guid("df9831f9-1b48-4ff7-9d4f-e091832e0f48"),
                            RoleId = new Guid("dc231def-8ac8-4f3f-a393-1bb4dacc83f7")
                        },
                        new
                        {
                            UserId = new Guid("96b2053d-3bf2-49c7-9071-6459da82bc26"),
                            RoleId = new Guid("dc231def-8ac8-4f3f-a393-1bb4dacc83f7")
                        },
                        new
                        {
                            UserId = new Guid("f06ff109-804e-4fcd-b796-d942270a726e"),
                            RoleId = new Guid("dc231def-8ac8-4f3f-a393-1bb4dacc83f7")
                        },
                        new
                        {
                            UserId = new Guid("3f597454-e804-4848-8ad7-735a512277f3"),
                            RoleId = new Guid("dc231def-8ac8-4f3f-a393-1bb4dacc83f7")
                        },
                        new
                        {
                            UserId = new Guid("d5a557f8-9f37-4792-bfc9-a36e520e376b"),
                            RoleId = new Guid("dc231def-8ac8-4f3f-a393-1bb4dacc83f7")
                        },
                        new
                        {
                            UserId = new Guid("02d2db96-4cb1-4a33-94af-cc562185939b"),
                            RoleId = new Guid("dc231def-8ac8-4f3f-a393-1bb4dacc83f7")
                        },
                        new
                        {
                            UserId = new Guid("296e9a76-205b-4524-b666-be15a962b3f5"),
                            RoleId = new Guid("dc231def-8ac8-4f3f-a393-1bb4dacc83f7")
                        },
                        new
                        {
                            UserId = new Guid("b3e1c8fc-e664-491e-a189-8f0c8dc4b592"),
                            RoleId = new Guid("dc231def-8ac8-4f3f-a393-1bb4dacc83f7")
                        },
                        new
                        {
                            UserId = new Guid("aed10caa-879b-4bbd-b578-9a987f4d34de"),
                            RoleId = new Guid("dc231def-8ac8-4f3f-a393-1bb4dacc83f7")
                        },
                        new
                        {
                            UserId = new Guid("006a6ef0-4418-409c-bb83-a1cb1c988e34"),
                            RoleId = new Guid("dc231def-8ac8-4f3f-a393-1bb4dacc83f7")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Board", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Boards");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3d685ea6-5b9a-40f3-8069-d7e34bfd074a"),
                            CreatedOn = new DateTime(2024, 5, 29, 2, 39, 29, 895, DateTimeKind.Local).AddTicks(3297),
                            ProjectId = new Guid("58c40920-ea65-43d5-b97a-9a4058f47721"),
                            Title = "Front-end board"
                        },
                        new
                        {
                            Id = new Guid("941575cd-f7ea-4804-9822-c21686dbb9c6"),
                            CreatedOn = new DateTime(2024, 5, 29, 2, 39, 29, 895, DateTimeKind.Local).AddTicks(3301),
                            ProjectId = new Guid("58c40920-ea65-43d5-b97a-9a4058f47721"),
                            Title = "Back-end board"
                        },
                        new
                        {
                            Id = new Guid("a6e7f3a5-3f33-4fdb-81da-2551edc602a3"),
                            CreatedOn = new DateTime(2024, 5, 29, 2, 39, 29, 895, DateTimeKind.Local).AddTicks(3303),
                            ProjectId = new Guid("6da16c63-9a78-4ac8-9951-ae5e670c8c7b"),
                            Title = "Analiz"
                        },
                        new
                        {
                            Id = new Guid("a4ec6ab7-58d0-4f50-87ae-e697cf39b332"),
                            CreatedOn = new DateTime(2024, 5, 29, 2, 39, 29, 895, DateTimeKind.Local).AddTicks(3305),
                            ProjectId = new Guid("6da16c63-9a78-4ac8-9951-ae5e670c8c7b"),
                            Title = "Geliştirme"
                        });
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.BoardUserAssociation", b =>
                {
                    b.Property<Guid>("BoardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BoardId", "AppUserId");

                    b.HasIndex("AppUserId");

                    b.ToTable("BoardUserAssociations");

                    b.HasData(
                        new
                        {
                            BoardId = new Guid("3d685ea6-5b9a-40f3-8069-d7e34bfd074a"),
                            AppUserId = new Guid("96b2053d-3bf2-49c7-9071-6459da82bc26")
                        },
                        new
                        {
                            BoardId = new Guid("3d685ea6-5b9a-40f3-8069-d7e34bfd074a"),
                            AppUserId = new Guid("f06ff109-804e-4fcd-b796-d942270a726e")
                        },
                        new
                        {
                            BoardId = new Guid("3d685ea6-5b9a-40f3-8069-d7e34bfd074a"),
                            AppUserId = new Guid("3f597454-e804-4848-8ad7-735a512277f3")
                        },
                        new
                        {
                            BoardId = new Guid("a4ec6ab7-58d0-4f50-87ae-e697cf39b332"),
                            AppUserId = new Guid("96b2053d-3bf2-49c7-9071-6459da82bc26")
                        },
                        new
                        {
                            BoardId = new Guid("a4ec6ab7-58d0-4f50-87ae-e697cf39b332"),
                            AppUserId = new Guid("f06ff109-804e-4fcd-b796-d942270a726e")
                        },
                        new
                        {
                            BoardId = new Guid("a4ec6ab7-58d0-4f50-87ae-e697cf39b332"),
                            AppUserId = new Guid("3f597454-e804-4848-8ad7-735a512277f3")
                        },
                        new
                        {
                            BoardId = new Guid("a4ec6ab7-58d0-4f50-87ae-e697cf39b332"),
                            AppUserId = new Guid("d5a557f8-9f37-4792-bfc9-a36e520e376b")
                        },
                        new
                        {
                            BoardId = new Guid("a4ec6ab7-58d0-4f50-87ae-e697cf39b332"),
                            AppUserId = new Guid("02d2db96-4cb1-4a33-94af-cc562185939b")
                        },
                        new
                        {
                            BoardId = new Guid("a4ec6ab7-58d0-4f50-87ae-e697cf39b332"),
                            AppUserId = new Guid("296e9a76-205b-4524-b666-be15a962b3f5")
                        },
                        new
                        {
                            BoardId = new Guid("a4ec6ab7-58d0-4f50-87ae-e697cf39b332"),
                            AppUserId = new Guid("b3e1c8fc-e664-491e-a189-8f0c8dc4b592")
                        },
                        new
                        {
                            BoardId = new Guid("a4ec6ab7-58d0-4f50-87ae-e697cf39b332"),
                            AppUserId = new Guid("aed10caa-879b-4bbd-b578-9a987f4d34de")
                        },
                        new
                        {
                            BoardId = new Guid("a4ec6ab7-58d0-4f50-87ae-e697cf39b332"),
                            AppUserId = new Guid("006a6ef0-4418-409c-bb83-a1cb1c988e34")
                        });
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("SenderId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Cost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Costs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b4720fc6-60a3-4658-be76-b128f15d40fa"),
                            Amount = 500.00m,
                            CreatedOn = new DateTime(2024, 5, 29, 2, 39, 29, 895, DateTimeKind.Local).AddTicks(3647),
                            Date = new DateTime(2024, 5, 29, 2, 39, 29, 895, DateTimeKind.Local).AddTicks(3646),
                            Description = "Sample cost",
                            ProjectId = new Guid("4530f8b5-fdac-48f2-96ed-634321b5c390")
                        },
                        new
                        {
                            Id = new Guid("f8bf4243-3bd3-4d7a-a548-cf63c1a99f60"),
                            Amount = 200.00m,
                            CreatedOn = new DateTime(2024, 5, 29, 2, 39, 29, 895, DateTimeKind.Local).AddTicks(3666),
                            Date = new DateTime(2024, 5, 29, 2, 39, 29, 895, DateTimeKind.Local).AddTicks(3665),
                            Description = "Sample cost",
                            ProjectId = new Guid("58c40920-ea65-43d5-b97a-9a4058f47721")
                        });
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Dependency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DependsOnJobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("Dependencies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bc406da2-959a-4740-a446-a2525030cce5"),
                            CreatedOn = new DateTime(2024, 5, 29, 2, 39, 29, 895, DateTimeKind.Local).AddTicks(3617),
                            DependsOnJobId = new Guid("d0442507-5736-4356-9f7f-d57e3ad21100"),
                            JobId = new Guid("1e8b04bf-d8f5-4cb3-b73d-37469ae06d42")
                        });
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("bit");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<Guid?>("StageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StageId");

                    b.ToTable("Jobs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5f6bafe4-bdf9-4612-9534-95e162a7b054"),
                            CreatedOn = new DateTime(2024, 5, 29, 2, 39, 29, 895, DateTimeKind.Local).AddTicks(3499),
                            Description = "Design user interface for the blog site",
                            DueDate = new DateTime(2024, 6, 5, 2, 39, 29, 895, DateTimeKind.Local).AddTicks(3494),
                            IsComplete = false,
                            Priority = 0,
                            StageId = new Guid("f344611e-0a27-40a8-9823-9ba34a97817d"),
                            StartDate = new DateTime(2024, 5, 29, 2, 39, 29, 895, DateTimeKind.Local).AddTicks(3494),
                            Title = "Design UI"
                        },
                        new
                        {
                            Id = new Guid("d0442507-5736-4356-9f7f-d57e3ad21100"),
                            CreatedOn = new DateTime(2024, 5, 29, 2, 39, 29, 895, DateTimeKind.Local).AddTicks(3505),
                            Description = "Analyze requirements for the stock tracking project",
                            DueDate = new DateTime(2024, 6, 12, 2, 39, 29, 895, DateTimeKind.Local).AddTicks(3505),
                            IsComplete = false,
                            Priority = 1,
                            StageId = new Guid("c701be2c-31ed-4867-9b08-384963408a5f"),
                            StartDate = new DateTime(2024, 5, 29, 2, 39, 29, 895, DateTimeKind.Local).AddTicks(3504),
                            Title = "Requirement Analysis"
                        },
                        new
                        {
                            Id = new Guid("1e8b04bf-d8f5-4cb3-b73d-37469ae06d42"),
                            CreatedOn = new DateTime(2024, 5, 29, 2, 39, 29, 895, DateTimeKind.Local).AddTicks(3510),
                            Description = "Depend job",
                            DueDate = new DateTime(2024, 6, 12, 2, 39, 29, 895, DateTimeKind.Local).AddTicks(3509),
                            IsComplete = false,
                            Priority = 2,
                            StageId = new Guid("c701be2c-31ed-4867-9b08-384963408a5f"),
                            StartDate = new DateTime(2024, 5, 29, 2, 39, 29, 895, DateTimeKind.Local).AddTicks(3508),
                            Title = "Depend job"
                        },
                        new
                        {
                            Id = new Guid("d724fa4d-415b-452a-a58f-a114c5bc9570"),
                            CreatedOn = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Müşteri ile bir araya gelerek yazılım gereksinimlerinin detaylı bir şekilde incelenmesi",
                            DueDate = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsComplete = false,
                            Priority = 1,
                            StageId = new Guid("93c67ea7-db18-41f9-9e49-f3f7cee6c21f"),
                            StartDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Müşteri toplantısı ve gereksinimlerin belirlenmesi"
                        },
                        new
                        {
                            Id = new Guid("ea77c5c3-d52e-43e3-a00f-f04ee8c63f48"),
                            CreatedOn = new DateTime(2024, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Yazılımın işlevsel gereksinimlerinin ayrıntılı bir şekilde belirlenmesi",
                            DueDate = new DateTime(2024, 1, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsComplete = false,
                            Priority = 0,
                            StageId = new Guid("93c67ea7-db18-41f9-9e49-f3f7cee6c21f"),
                            StartDate = new DateTime(2024, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Fonksiyonel gereksinimlerin belirlenmesi"
                        },
                        new
                        {
                            Id = new Guid("03e6dca0-a9e1-4723-b784-99ce486b868f"),
                            CreatedOn = new DateTime(2024, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Yazılımın prototipinin tasarlanması ve kullanıcı geri bildirimlerinin alınması",
                            DueDate = new DateTime(2024, 1, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsComplete = false,
                            Priority = 2,
                            StageId = new Guid("9bdde391-e519-4fc8-8b70-4420ec3be9a8"),
                            StartDate = new DateTime(2024, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Prototip tasarımı"
                        },
                        new
                        {
                            Id = new Guid("c1038880-6cbe-4529-bcfc-0717402da6c1"),
                            CreatedOn = new DateTime(2024, 1, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Kullanıcı arayüzünün revize edilmesi ve geliştirilmiş bir versiyonunun hazırlanması",
                            DueDate = new DateTime(2024, 1, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsComplete = false,
                            Priority = 2,
                            StageId = new Guid("9bdde391-e519-4fc8-8b70-4420ec3be9a8"),
                            StartDate = new DateTime(2024, 1, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Arayüz tasarım revizyonu"
                        },
                        new
                        {
                            Id = new Guid("b39c1dcc-4ff6-4a4e-bdc6-1b08426b0287"),
                            CreatedOn = new DateTime(2024, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Yazılımın arka uç (backend) API'larının geliştirilmesi ve test edilmesi",
                            DueDate = new DateTime(2024, 1, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsComplete = false,
                            Priority = 2,
                            StageId = new Guid("83103c81-b8cd-403b-8fd7-51d9f7a2cb1c"),
                            StartDate = new DateTime(2024, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Backend API geliştirme"
                        },
                        new
                        {
                            Id = new Guid("45b4743a-c10e-4104-b792-138317feff64"),
                            CreatedOn = new DateTime(2024, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Kullanıcı arayüzünün ön uç (frontend) bileşenlerinin geliştirilmesi ve entegrasyon testlerinin yapılması",
                            DueDate = new DateTime(2024, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsComplete = false,
                            Priority = 1,
                            StageId = new Guid("83103c81-b8cd-403b-8fd7-51d9f7a2cb1c"),
                            StartDate = new DateTime(2024, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Frontend komponent geliştirme"
                        },
                        new
                        {
                            Id = new Guid("a8909ddb-dd0a-4627-9f61-1d0708ae14ec"),
                            CreatedOn = new DateTime(2024, 1, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Yazılımın test edilmesi için birinci aşama test senaryolarının hazırlanması",
                            DueDate = new DateTime(2024, 1, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsComplete = false,
                            Priority = 0,
                            StageId = new Guid("e389bdff-bcbb-4ef7-8f7c-8c0646c972f2"),
                            StartDate = new DateTime(2024, 1, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Birinci aşama test senaryolarının hazırlanması"
                        },
                        new
                        {
                            Id = new Guid("7fb6cf00-9584-49cb-9984-f3c5496be6f7"),
                            CreatedOn = new DateTime(2024, 1, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Yazılımın farklı bileşenlerinin bir araya getirilerek sistem entegrasyon testlerinin yapılması",
                            DueDate = new DateTime(2024, 1, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsComplete = false,
                            Priority = 1,
                            StageId = new Guid("e389bdff-bcbb-4ef7-8f7c-8c0646c972f2"),
                            StartDate = new DateTime(2024, 1, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Sistem entegrasyon testlerinin yapılması"
                        },
                        new
                        {
                            Id = new Guid("e620632a-c388-4890-b0af-0d63266efa21"),
                            CreatedOn = new DateTime(2024, 5, 29, 2, 39, 29, 895, DateTimeKind.Local).AddTicks(3544),
                            Description = "Mevcut sistem ve iş süreçlerinin detaylı bir şekilde incelenmesi",
                            DueDate = new DateTime(2024, 1, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsComplete = false,
                            Priority = 1,
                            StageId = new Guid("93c67ea7-db18-41f9-9e49-f3f7cee6c21f"),
                            StartDate = new DateTime(2024, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Mevcut sistem analizi"
                        },
                        new
                        {
                            Id = new Guid("aaf5445c-966d-459e-b3f9-95346c98fd46"),
                            CreatedOn = new DateTime(2024, 5, 29, 2, 39, 29, 895, DateTimeKind.Local).AddTicks(3547),
                            Description = "Müşteri gereksinimlerinin toplanması ve analiz edilmesi",
                            DueDate = new DateTime(2024, 1, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsComplete = false,
                            Priority = 0,
                            StageId = new Guid("93c67ea7-db18-41f9-9e49-f3f7cee6c21f"),
                            StartDate = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Müşteri ihtiyaçlarının belirlenmesi"
                        },
                        new
                        {
                            Id = new Guid("1d27105f-450f-4f62-869e-edb2399f67a1"),
                            CreatedOn = new DateTime(2024, 5, 29, 2, 39, 29, 895, DateTimeKind.Local).AddTicks(3550),
                            Description = "Yapılan analiz çalışmalarının sonuçlarının detaylı bir şekilde dokümante edilmesi",
                            DueDate = new DateTime(2024, 1, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsComplete = false,
                            Priority = 0,
                            StageId = new Guid("93c67ea7-db18-41f9-9e49-f3f7cee6c21f"),
                            StartDate = new DateTime(2024, 1, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Analiz sonuçlarının dokümantasyonu"
                        },
                        new
                        {
                            Id = new Guid("f60eda8b-d77c-494e-b1b3-de8dcb352381"),
                            CreatedOn = new DateTime(2024, 5, 29, 2, 39, 29, 895, DateTimeKind.Local).AddTicks(3555),
                            Description = "Yazılımın kullanıcı arayüzü tasarımının ilk mockup'ları oluşturulması",
                            DueDate = new DateTime(2024, 1, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsComplete = false,
                            Priority = 1,
                            StageId = new Guid("9bdde391-e519-4fc8-8b70-4420ec3be9a8"),
                            StartDate = new DateTime(2024, 1, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Kullanıcı arayüzünün mockup'larının hazırlanması"
                        },
                        new
                        {
                            Id = new Guid("f78d8051-12d2-417e-96a0-92354f2ff80d"),
                            CreatedOn = new DateTime(2024, 5, 29, 2, 39, 29, 895, DateTimeKind.Local).AddTicks(3558),
                            Description = "Kullanılacak renklerin ve renk paletinin belirlenmesi",
                            DueDate = new DateTime(2024, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsComplete = false,
                            Priority = 2,
                            StageId = new Guid("9bdde391-e519-4fc8-8b70-4420ec3be9a8"),
                            StartDate = new DateTime(2024, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Arayüz tasarımı için renk paletinin belirlenmesi"
                        },
                        new
                        {
                            Id = new Guid("f45a66ef-f8f7-490f-8d6d-3ce25da323bd"),
                            CreatedOn = new DateTime(2024, 5, 29, 2, 39, 29, 895, DateTimeKind.Local).AddTicks(3560),
                            Description = "Kullanıcı arayüzünün kullanılabilirliğinin test edilmesi ve geri bildirimlerin alınması",
                            DueDate = new DateTime(2024, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsComplete = false,
                            Priority = 2,
                            StageId = new Guid("9bdde391-e519-4fc8-8b70-4420ec3be9a8"),
                            StartDate = new DateTime(2024, 1, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Arayüzün kullanılabilirlik testlerinin yapılması"
                        },
                        new
                        {
                            Id = new Guid("f37af2d1-d197-4c4a-96b5-9392521c87c2"),
                            CreatedOn = new DateTime(2024, 5, 29, 2, 39, 29, 895, DateTimeKind.Local).AddTicks(3563),
                            Description = "Tasarım aşamasında alınan geri bildirimler doğrultusunda gerekli revizyonların yapılması",
                            DueDate = new DateTime(2024, 1, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsComplete = false,
                            Priority = 2,
                            StageId = new Guid("9bdde391-e519-4fc8-8b70-4420ec3be9a8"),
                            StartDate = new DateTime(2024, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Tasarım revizyonu"
                        },
                        new
                        {
                            Id = new Guid("d108a301-32d1-4a2d-a8ac-e0fdf8aa7fff"),
                            CreatedOn = new DateTime(2024, 5, 29, 2, 39, 29, 895, DateTimeKind.Local).AddTicks(3566),
                            Description = "Kullanıcı arayüzünde kullanılacak animasyonların hazırlanması ve uygulanması",
                            DueDate = new DateTime(2024, 1, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsComplete = false,
                            Priority = 2,
                            StageId = new Guid("9bdde391-e519-4fc8-8b70-4420ec3be9a8"),
                            StartDate = new DateTime(2024, 1, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Arayüz animasyonlarının hazırlanması"
                        });
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.JobUserAssociation", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "JobId");

                    b.HasIndex("JobId");

                    b.ToTable("JobUserAssociations");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("3f597454-e804-4848-8ad7-735a512277f3"),
                            JobId = new Guid("a8909ddb-dd0a-4627-9f61-1d0708ae14ec")
                        },
                        new
                        {
                            UserId = new Guid("d5a557f8-9f37-4792-bfc9-a36e520e376b"),
                            JobId = new Guid("a8909ddb-dd0a-4627-9f61-1d0708ae14ec")
                        },
                        new
                        {
                            UserId = new Guid("d5a557f8-9f37-4792-bfc9-a36e520e376b"),
                            JobId = new Guid("7fb6cf00-9584-49cb-9984-f3c5496be6f7")
                        },
                        new
                        {
                            UserId = new Guid("96b2053d-3bf2-49c7-9071-6459da82bc26"),
                            JobId = new Guid("b39c1dcc-4ff6-4a4e-bdc6-1b08426b0287")
                        },
                        new
                        {
                            UserId = new Guid("f06ff109-804e-4fcd-b796-d942270a726e"),
                            JobId = new Guid("b39c1dcc-4ff6-4a4e-bdc6-1b08426b0287")
                        },
                        new
                        {
                            UserId = new Guid("02d2db96-4cb1-4a33-94af-cc562185939b"),
                            JobId = new Guid("b39c1dcc-4ff6-4a4e-bdc6-1b08426b0287")
                        },
                        new
                        {
                            UserId = new Guid("02d2db96-4cb1-4a33-94af-cc562185939b"),
                            JobId = new Guid("45b4743a-c10e-4104-b792-138317feff64")
                        },
                        new
                        {
                            UserId = new Guid("3f597454-e804-4848-8ad7-735a512277f3"),
                            JobId = new Guid("45b4743a-c10e-4104-b792-138317feff64")
                        },
                        new
                        {
                            UserId = new Guid("296e9a76-205b-4524-b666-be15a962b3f5"),
                            JobId = new Guid("45b4743a-c10e-4104-b792-138317feff64")
                        },
                        new
                        {
                            UserId = new Guid("b3e1c8fc-e664-491e-a189-8f0c8dc4b592"),
                            JobId = new Guid("03e6dca0-a9e1-4723-b784-99ce486b868f")
                        },
                        new
                        {
                            UserId = new Guid("aed10caa-879b-4bbd-b578-9a987f4d34de"),
                            JobId = new Guid("03e6dca0-a9e1-4723-b784-99ce486b868f")
                        },
                        new
                        {
                            UserId = new Guid("006a6ef0-4418-409c-bb83-a1cb1c988e34"),
                            JobId = new Guid("03e6dca0-a9e1-4723-b784-99ce486b868f")
                        },
                        new
                        {
                            UserId = new Guid("006a6ef0-4418-409c-bb83-a1cb1c988e34"),
                            JobId = new Guid("c1038880-6cbe-4529-bcfc-0717402da6c1")
                        },
                        new
                        {
                            UserId = new Guid("96b2053d-3bf2-49c7-9071-6459da82bc26"),
                            JobId = new Guid("c1038880-6cbe-4529-bcfc-0717402da6c1")
                        },
                        new
                        {
                            UserId = new Guid("f06ff109-804e-4fcd-b796-d942270a726e"),
                            JobId = new Guid("f60eda8b-d77c-494e-b1b3-de8dcb352381")
                        },
                        new
                        {
                            UserId = new Guid("d5a557f8-9f37-4792-bfc9-a36e520e376b"),
                            JobId = new Guid("f60eda8b-d77c-494e-b1b3-de8dcb352381")
                        },
                        new
                        {
                            UserId = new Guid("02d2db96-4cb1-4a33-94af-cc562185939b"),
                            JobId = new Guid("f60eda8b-d77c-494e-b1b3-de8dcb352381")
                        },
                        new
                        {
                            UserId = new Guid("02d2db96-4cb1-4a33-94af-cc562185939b"),
                            JobId = new Guid("f78d8051-12d2-417e-96a0-92354f2ff80d")
                        },
                        new
                        {
                            UserId = new Guid("96b2053d-3bf2-49c7-9071-6459da82bc26"),
                            JobId = new Guid("f78d8051-12d2-417e-96a0-92354f2ff80d")
                        },
                        new
                        {
                            UserId = new Guid("aed10caa-879b-4bbd-b578-9a987f4d34de"),
                            JobId = new Guid("f45a66ef-f8f7-490f-8d6d-3ce25da323bd")
                        },
                        new
                        {
                            UserId = new Guid("aed10caa-879b-4bbd-b578-9a987f4d34de"),
                            JobId = new Guid("f37af2d1-d197-4c4a-96b5-9392521c87c2")
                        },
                        new
                        {
                            UserId = new Guid("aed10caa-879b-4bbd-b578-9a987f4d34de"),
                            JobId = new Guid("d108a301-32d1-4a2d-a8ac-e0fdf8aa7fff")
                        },
                        new
                        {
                            UserId = new Guid("aed10caa-879b-4bbd-b578-9a987f4d34de"),
                            JobId = new Guid("d724fa4d-415b-452a-a58f-a114c5bc9570")
                        },
                        new
                        {
                            UserId = new Guid("b3e1c8fc-e664-491e-a189-8f0c8dc4b592"),
                            JobId = new Guid("d724fa4d-415b-452a-a58f-a114c5bc9570")
                        },
                        new
                        {
                            UserId = new Guid("296e9a76-205b-4524-b666-be15a962b3f5"),
                            JobId = new Guid("ea77c5c3-d52e-43e3-a00f-f04ee8c63f48")
                        },
                        new
                        {
                            UserId = new Guid("d5a557f8-9f37-4792-bfc9-a36e520e376b"),
                            JobId = new Guid("e620632a-c388-4890-b0af-0d63266efa21")
                        },
                        new
                        {
                            UserId = new Guid("f06ff109-804e-4fcd-b796-d942270a726e"),
                            JobId = new Guid("e620632a-c388-4890-b0af-0d63266efa21")
                        },
                        new
                        {
                            UserId = new Guid("006a6ef0-4418-409c-bb83-a1cb1c988e34"),
                            JobId = new Guid("aaf5445c-966d-459e-b3f9-95346c98fd46")
                        },
                        new
                        {
                            UserId = new Guid("aed10caa-879b-4bbd-b578-9a987f4d34de"),
                            JobId = new Guid("1d27105f-450f-4f62-869e-edb2399f67a1")
                        });
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4530f8b5-fdac-48f2-96ed-634321b5c390"),
                            CreatedOn = new DateTime(2024, 5, 29, 2, 39, 29, 894, DateTimeKind.Local).AddTicks(9554),
                            Description = "Bu proje, kullanıcıların makaleler ve yazılar paylaşabileceği, okuyucuların yorum yapabileceği ve içeriklerin kategorize edilebileceği bir blog sitesi geliştirmeyi hedeflemektedir. Amacımız, kullanımı kolay bir arayüz ve zengin özellikler ile kullanıcıların etkili bir şekilde içerik oluşturmasını sağlamaktır.",
                            EndDate = new DateTime(2024, 6, 28, 2, 39, 29, 894, DateTimeKind.Local).AddTicks(9547),
                            ProjectName = "Blog Site Projesi",
                            StartDate = new DateTime(2024, 5, 29, 2, 39, 29, 894, DateTimeKind.Local).AddTicks(9546)
                        },
                        new
                        {
                            Id = new Guid("58c40920-ea65-43d5-b97a-9a4058f47721"),
                            CreatedOn = new DateTime(2024, 5, 29, 2, 39, 29, 894, DateTimeKind.Local).AddTicks(9558),
                            Description = "Bu proje, şirketlerin stok yönetim süreçlerini izlemelerini ve kontrol etmelerini sağlayan bir stok takip sistemi geliştirmeyi amaçlamaktadır. Kullanıcılar, stok seviyelerini gerçek zamanlı olarak izleyebilir, sipariş yönetimini yapabilir ve stokla ilgili raporlar oluşturabilir.",
                            EndDate = new DateTime(2024, 7, 28, 2, 39, 29, 894, DateTimeKind.Local).AddTicks(9558),
                            ProjectName = "Stock takip Projesi",
                            StartDate = new DateTime(2024, 5, 29, 2, 39, 29, 894, DateTimeKind.Local).AddTicks(9557)
                        },
                        new
                        {
                            Id = new Guid("6da16c63-9a78-4ac8-9951-ae5e670c8c7b"),
                            CreatedOn = new DateTime(2024, 5, 29, 2, 39, 29, 894, DateTimeKind.Local).AddTicks(9563),
                            Description = "Bu yazılım projesi, şirket içi süreçleri optimize etmeyi ve verimliliği artırmayı amaçlayan bir yönetim yazılımı geliştirmeyi içermektedir. Proje, çeşitli modüller aracılığıyla farklı departmanların ihtiyaçlarını karşılayacak ve entegre bir çözüm sunacaktır.",
                            EndDate = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProjectName = "Yazılım Projesi",
                            StartDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("2d706327-c0b6-44de-8b96-3c21c2be7fa3"),
                            CreatedOn = new DateTime(2024, 5, 29, 2, 39, 29, 894, DateTimeKind.Local).AddTicks(9568),
                            Description = "Yeni bir ürünün pazarlama stratejisinin oluşturulması",
                            EndDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProjectName = "Pazarlama Kampanyası",
                            StartDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("7c591e9b-81f4-4593-9919-6b68c36f1fc3"),
                            CreatedOn = new DateTime(2024, 5, 29, 2, 39, 29, 894, DateTimeKind.Local).AddTicks(9571),
                            Description = "Yeni bir ürünün tasarım sürecinin yürütülmesi",
                            EndDate = new DateTime(2024, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProjectName = "Yeni Ürün Tasarımı",
                            StartDate = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.ProjectUserAssociation", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProjectId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectUserAssociations");

                    b.HasData(
                        new
                        {
                            ProjectId = new Guid("4530f8b5-fdac-48f2-96ed-634321b5c390"),
                            UserId = new Guid("11cd88fe-4611-4cc2-beff-39359a285452")
                        },
                        new
                        {
                            ProjectId = new Guid("58c40920-ea65-43d5-b97a-9a4058f47721"),
                            UserId = new Guid("96b2053d-3bf2-49c7-9071-6459da82bc26")
                        },
                        new
                        {
                            ProjectId = new Guid("58c40920-ea65-43d5-b97a-9a4058f47721"),
                            UserId = new Guid("11cd88fe-4611-4cc2-beff-39359a285452")
                        },
                        new
                        {
                            ProjectId = new Guid("58c40920-ea65-43d5-b97a-9a4058f47721"),
                            UserId = new Guid("df9831f9-1b48-4ff7-9d4f-e091832e0f48")
                        },
                        new
                        {
                            ProjectId = new Guid("58c40920-ea65-43d5-b97a-9a4058f47721"),
                            UserId = new Guid("f06ff109-804e-4fcd-b796-d942270a726e")
                        },
                        new
                        {
                            ProjectId = new Guid("58c40920-ea65-43d5-b97a-9a4058f47721"),
                            UserId = new Guid("3f597454-e804-4848-8ad7-735a512277f3")
                        },
                        new
                        {
                            ProjectId = new Guid("6da16c63-9a78-4ac8-9951-ae5e670c8c7b"),
                            UserId = new Guid("11cd88fe-4611-4cc2-beff-39359a285452")
                        },
                        new
                        {
                            ProjectId = new Guid("6da16c63-9a78-4ac8-9951-ae5e670c8c7b"),
                            UserId = new Guid("f06ff109-804e-4fcd-b796-d942270a726e")
                        },
                        new
                        {
                            ProjectId = new Guid("6da16c63-9a78-4ac8-9951-ae5e670c8c7b"),
                            UserId = new Guid("96b2053d-3bf2-49c7-9071-6459da82bc26")
                        },
                        new
                        {
                            ProjectId = new Guid("6da16c63-9a78-4ac8-9951-ae5e670c8c7b"),
                            UserId = new Guid("3f597454-e804-4848-8ad7-735a512277f3")
                        },
                        new
                        {
                            ProjectId = new Guid("6da16c63-9a78-4ac8-9951-ae5e670c8c7b"),
                            UserId = new Guid("d5a557f8-9f37-4792-bfc9-a36e520e376b")
                        },
                        new
                        {
                            ProjectId = new Guid("6da16c63-9a78-4ac8-9951-ae5e670c8c7b"),
                            UserId = new Guid("02d2db96-4cb1-4a33-94af-cc562185939b")
                        },
                        new
                        {
                            ProjectId = new Guid("6da16c63-9a78-4ac8-9951-ae5e670c8c7b"),
                            UserId = new Guid("296e9a76-205b-4524-b666-be15a962b3f5")
                        },
                        new
                        {
                            ProjectId = new Guid("6da16c63-9a78-4ac8-9951-ae5e670c8c7b"),
                            UserId = new Guid("b3e1c8fc-e664-491e-a189-8f0c8dc4b592")
                        },
                        new
                        {
                            ProjectId = new Guid("6da16c63-9a78-4ac8-9951-ae5e670c8c7b"),
                            UserId = new Guid("aed10caa-879b-4bbd-b578-9a987f4d34de")
                        },
                        new
                        {
                            ProjectId = new Guid("6da16c63-9a78-4ac8-9951-ae5e670c8c7b"),
                            UserId = new Guid("006a6ef0-4418-409c-bb83-a1cb1c988e34")
                        });
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Stage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BoardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.ToTable("Stages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c701be2c-31ed-4867-9b08-384963408a5f"),
                            BoardId = new Guid("3d685ea6-5b9a-40f3-8069-d7e34bfd074a"),
                            CreatedOn = new DateTime(2024, 5, 29, 2, 39, 29, 895, DateTimeKind.Local).AddTicks(3347),
                            Description = "Design stage for the blog site project",
                            StageName = "Home Page"
                        },
                        new
                        {
                            Id = new Guid("f344611e-0a27-40a8-9823-9ba34a97817d"),
                            BoardId = new Guid("3d685ea6-5b9a-40f3-8069-d7e34bfd074a"),
                            CreatedOn = new DateTime(2024, 5, 29, 2, 39, 29, 895, DateTimeKind.Local).AddTicks(3350),
                            Description = "Planning stage for the stock tracking project",
                            StageName = "Supplier Page"
                        },
                        new
                        {
                            Id = new Guid("93c67ea7-db18-41f9-9e49-f3f7cee6c21f"),
                            BoardId = new Guid("a4ec6ab7-58d0-4f50-87ae-e697cf39b332"),
                            CreatedOn = new DateTime(2024, 5, 29, 2, 39, 29, 895, DateTimeKind.Local).AddTicks(3352),
                            Description = "Geliştirme aşaması için analiz aşaması",
                            StageName = "Analiz"
                        },
                        new
                        {
                            Id = new Guid("9bdde391-e519-4fc8-8b70-4420ec3be9a8"),
                            BoardId = new Guid("a4ec6ab7-58d0-4f50-87ae-e697cf39b332"),
                            CreatedOn = new DateTime(2024, 5, 29, 2, 39, 29, 895, DateTimeKind.Local).AddTicks(3354),
                            Description = "Geliştirme aşaması için tasarım aşaması",
                            StageName = "Tasarım"
                        },
                        new
                        {
                            Id = new Guid("83103c81-b8cd-403b-8fd7-51d9f7a2cb1c"),
                            BoardId = new Guid("a4ec6ab7-58d0-4f50-87ae-e697cf39b332"),
                            CreatedOn = new DateTime(2024, 5, 29, 2, 39, 29, 895, DateTimeKind.Local).AddTicks(3358),
                            Description = "Geliştirme aşaması için kodlama aşaması",
                            StageName = "Kodlama"
                        },
                        new
                        {
                            Id = new Guid("e389bdff-bcbb-4ef7-8f7c-8c0646c972f2"),
                            BoardId = new Guid("a4ec6ab7-58d0-4f50-87ae-e697cf39b332"),
                            CreatedOn = new DateTime(2024, 5, 29, 2, 39, 29, 895, DateTimeKind.Local).AddTicks(3364),
                            Description = "Geliştirme aşaması için test aşaması",
                            StageName = "Test"
                        });
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.SubJob", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("bit");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("SubJobs");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Identity.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("86702504-a0c9-4c8f-af36-b6b4d454431a"),
                            CreatedOn = new DateTime(2024, 5, 29, 2, 39, 29, 57, DateTimeKind.Local).AddTicks(9223),
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("7415fe13-f632-4281-acb0-443ac83b42b8"),
                            CreatedOn = new DateTime(2024, 5, 29, 2, 39, 29, 57, DateTimeKind.Local).AddTicks(9237),
                            Name = "project-manager",
                            NormalizedName = "PROJECT-MANAGER"
                        },
                        new
                        {
                            Id = new Guid("27b0ae4f-f5df-495d-9fb0-3ca59e1ea3ae"),
                            CreatedOn = new DateTime(2024, 5, 29, 2, 39, 29, 57, DateTimeKind.Local).AddTicks(9240),
                            Name = "user",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = new Guid("dc231def-8ac8-4f3f-a393-1bb4dacc83f7"),
                            CreatedOn = new DateTime(2024, 5, 29, 2, 39, 29, 57, DateTimeKind.Local).AddTicks(9242),
                            Name = "project-user",
                            NormalizedName = "PROJECT-USER"
                        });
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Identity.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("caae504f-65d9-4ccd-b6b6-8fc94c4fdfc0"),
                            AccessFailedCount = 0,
                            BirthDay = new DateTime(2024, 5, 29, 2, 39, 29, 57, DateTimeKind.Local).AddTicks(9522),
                            ConcurrencyStamp = "39f3bb1a-c1ab-4480-b953-96ec54770526",
                            CreatedOn = new DateTime(2024, 5, 29, 2, 39, 29, 57, DateTimeKind.Local).AddTicks(9523),
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Furkan",
                            Gender = 1,
                            LastName = "Aydin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEOZedzCkG7TMmkITM7BsdGFX261e4Y2ZKAXiBP5LmqRAGUiuHKqDwouGgZOx/UbwzQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f557e9e9-ed33-49b0-8c87-30b8676a2bb5",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("11cd88fe-4611-4cc2-beff-39359a285452"),
                            AccessFailedCount = 0,
                            BirthDay = new DateTime(2024, 5, 29, 2, 39, 29, 57, DateTimeKind.Local).AddTicks(9532),
                            ConcurrencyStamp = "b5203343-92c9-46e6-a798-1a36af45a14b",
                            CreatedOn = new DateTime(2024, 5, 29, 2, 39, 29, 57, DateTimeKind.Local).AddTicks(9533),
                            Email = "aliyildiz@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ali",
                            Gender = 1,
                            LastName = "Yildiz ",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALIYILDIZ@GMAIL.COM",
                            NormalizedUserName = "ALIYILDIZ123",
                            PasswordHash = "AQAAAAIAAYagAAAAEInqPWPiH8uGZgl534VUezJUIKxUgg0r0v4ERhkKCRMTpoQAEKNSsVEhbnUoKyGsZA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "889a16bf-659b-45c2-bd46-e68e6a10c1c8",
                            TwoFactorEnabled = false,
                            UserName = "aliyildiz123"
                        },
                        new
                        {
                            Id = new Guid("df9831f9-1b48-4ff7-9d4f-e091832e0f48"),
                            AccessFailedCount = 0,
                            BirthDay = new DateTime(2024, 5, 29, 2, 39, 29, 57, DateTimeKind.Local).AddTicks(9541),
                            ConcurrencyStamp = "41c88942-66df-447d-a55b-d19274c17cb4",
                            CreatedOn = new DateTime(2024, 5, 29, 2, 39, 29, 57, DateTimeKind.Local).AddTicks(9542),
                            Email = "ayseyildiz@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ayse",
                            Gender = 2,
                            LastName = "Yildiz",
                            LockoutEnabled = false,
                            NormalizedEmail = "AYSEYILDIZ@GMAIL.COM",
                            NormalizedUserName = "AYSEYILDIZ123",
                            PasswordHash = "AQAAAAIAAYagAAAAEPeWk9spaoRCB2v9L8d8W1GWixKzkRe8L19RzxXHYkceu3n46jo7fqaJ89rWy3ui2g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "504eb00f-d6d8-492a-8bb1-879f08d4afb8",
                            TwoFactorEnabled = false,
                            UserName = "ayseyildiz123"
                        },
                        new
                        {
                            Id = new Guid("96b2053d-3bf2-49c7-9071-6459da82bc26"),
                            AccessFailedCount = 0,
                            BirthDay = new DateTime(2024, 5, 29, 2, 39, 29, 57, DateTimeKind.Local).AddTicks(9596),
                            ConcurrencyStamp = "929181bc-441b-4fb1-b828-a641c0e6ccc1",
                            CreatedOn = new DateTime(2024, 5, 29, 2, 39, 29, 57, DateTimeKind.Local).AddTicks(9597),
                            Email = "esrefyildiz@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Esref",
                            Gender = 2,
                            LastName = "Yildiz",
                            LockoutEnabled = false,
                            NormalizedEmail = "ESREFYILDIZ@GMAIL.COM",
                            NormalizedUserName = "ESREFYILDIZ123",
                            PasswordHash = "AQAAAAIAAYagAAAAEBCLEdeQCRRkQiqiR1H5zAfgFAf2zQaLz6F9E6CPTz0OpzSrOO9tDQOfDHrn/F/yoA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "19058209-a6be-411d-ac4d-e10d5a2a3cd3",
                            TwoFactorEnabled = false,
                            UserName = "esrefyildiz123"
                        },
                        new
                        {
                            Id = new Guid("f06ff109-804e-4fcd-b796-d942270a726e"),
                            AccessFailedCount = 0,
                            BirthDay = new DateTime(2024, 5, 29, 2, 39, 29, 57, DateTimeKind.Local).AddTicks(9603),
                            ConcurrencyStamp = "56a40cb2-a98a-416d-933d-3f10ba551b57",
                            CreatedOn = new DateTime(2024, 5, 29, 2, 39, 29, 57, DateTimeKind.Local).AddTicks(9604),
                            Email = "furkanaydin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Furkan",
                            Gender = 1,
                            LastName = "Aydin",
                            LockoutEnabled = false,
                            NormalizedEmail = "FURKANAYDIN@GMAIL.COM",
                            NormalizedUserName = "FURKANAYDIN123",
                            PasswordHash = "AQAAAAIAAYagAAAAEI7oiPX3lGdU7dS5KQDc1eJn33TvgDzHFJY4KuAAYXR6zmR74xolo6gMSnYjbto8Pw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "520e4234-c934-49ee-b541-51819673c3de",
                            TwoFactorEnabled = false,
                            UserName = "furkanaydin123"
                        },
                        new
                        {
                            Id = new Guid("d5a557f8-9f37-4792-bfc9-a36e520e376b"),
                            AccessFailedCount = 0,
                            BirthDay = new DateTime(2024, 5, 29, 2, 39, 29, 57, DateTimeKind.Local).AddTicks(9617),
                            ConcurrencyStamp = "a3d0b5a4-9b8e-4815-af9b-71df9ee50597",
                            CreatedOn = new DateTime(2024, 5, 29, 2, 39, 29, 57, DateTimeKind.Local).AddTicks(9618),
                            Email = "mustafaturker@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Mustafa",
                            Gender = 1,
                            LastName = "Turker",
                            LockoutEnabled = false,
                            NormalizedEmail = "MUSTAFATURKER@GMAIL.COM",
                            NormalizedUserName = "MUSTAFATURKER123",
                            PasswordHash = "AQAAAAIAAYagAAAAEOl6NzvnucfyrUXnMbSVS5JgI+ODucCLcjVaLkyDJvLM8ML+SjIgxwBuxFroHSR2EQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d10d1d99-11dd-41c9-b953-d6a74c7ce01c",
                            TwoFactorEnabled = false,
                            UserName = "mustafaturke123"
                        },
                        new
                        {
                            Id = new Guid("02d2db96-4cb1-4a33-94af-cc562185939b"),
                            AccessFailedCount = 0,
                            BirthDay = new DateTime(2024, 5, 29, 2, 39, 29, 57, DateTimeKind.Local).AddTicks(9623),
                            ConcurrencyStamp = "a2a3057f-adef-4c6e-b115-3bffd4114d3a",
                            CreatedOn = new DateTime(2024, 5, 29, 2, 39, 29, 57, DateTimeKind.Local).AddTicks(9624),
                            Email = "kemalcakir@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Kemal",
                            Gender = 1,
                            LastName = "Cakır",
                            LockoutEnabled = false,
                            NormalizedEmail = "KEMALCAKIR@GMAIL.COM",
                            NormalizedUserName = "KEMALCAKIR123",
                            PasswordHash = "AQAAAAIAAYagAAAAEAT2wYSXx6Xsp3QTFkLij8wZXM3VNh8XcRaeFKFQOE3j+XVGFvU98v8K/A3985a8Eg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4dba19f1-d78d-472a-993b-abd3f12b827d",
                            TwoFactorEnabled = false,
                            UserName = "kemalcakir123"
                        },
                        new
                        {
                            Id = new Guid("296e9a76-205b-4524-b666-be15a962b3f5"),
                            AccessFailedCount = 0,
                            BirthDay = new DateTime(2024, 5, 29, 2, 39, 29, 57, DateTimeKind.Local).AddTicks(9629),
                            ConcurrencyStamp = "7d7708e4-d923-488b-8099-670dd94e344f",
                            CreatedOn = new DateTime(2024, 5, 29, 2, 39, 29, 57, DateTimeKind.Local).AddTicks(9630),
                            Email = "melekcay@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Melek",
                            Gender = 1,
                            LastName = "Cay",
                            LockoutEnabled = false,
                            NormalizedEmail = "MELEKCAY@GMAIL.COM",
                            NormalizedUserName = "MELEKCAY123",
                            PasswordHash = "AQAAAAIAAYagAAAAELFyUryL+B6FmUXMkOUPy8yG7YNbFn5mYqy+IewJUmE9DP6UHfhz2zdIMpC6AWZb6Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "50364ca9-667b-4a59-a32f-727c1e672d35",
                            TwoFactorEnabled = false,
                            UserName = "melekcay123"
                        },
                        new
                        {
                            Id = new Guid("b3e1c8fc-e664-491e-a189-8f0c8dc4b592"),
                            AccessFailedCount = 0,
                            BirthDay = new DateTime(2024, 5, 29, 2, 39, 29, 57, DateTimeKind.Local).AddTicks(9635),
                            ConcurrencyStamp = "3191bda4-1419-40c5-be38-bc3d762b0cf7",
                            CreatedOn = new DateTime(2024, 5, 29, 2, 39, 29, 57, DateTimeKind.Local).AddTicks(9635),
                            Email = "gamzekayıs@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Gamze",
                            Gender = 1,
                            LastName = "Kayıs",
                            LockoutEnabled = false,
                            NormalizedEmail = "GAMZEKAYIS@GMAIL.COM",
                            NormalizedUserName = "gamzekayıs123",
                            PasswordHash = "AQAAAAIAAYagAAAAEDFwiZjfQV3eTjw2PVZiSPBNuaHgnbSBtKyoX6Dwn96j/BqwzCgoXNhFFOGT2XaNHQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0a1870d6-c432-4138-ad10-96f5a36cb008",
                            TwoFactorEnabled = false,
                            UserName = "gamzekayıs123"
                        },
                        new
                        {
                            Id = new Guid("aed10caa-879b-4bbd-b578-9a987f4d34de"),
                            AccessFailedCount = 0,
                            BirthDay = new DateTime(2024, 5, 29, 2, 39, 29, 57, DateTimeKind.Local).AddTicks(9643),
                            ConcurrencyStamp = "55782f53-8170-4318-85d2-7e49c100597f",
                            CreatedOn = new DateTime(2024, 5, 29, 2, 39, 29, 57, DateTimeKind.Local).AddTicks(9643),
                            Email = "rabiatopcu@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Rabia",
                            Gender = 1,
                            LastName = "Topcu",
                            LockoutEnabled = false,
                            NormalizedEmail = "RABIATOPCU@GMAIL.COM",
                            NormalizedUserName = "RABIATOPCU123",
                            PasswordHash = "AQAAAAIAAYagAAAAEHsEN5si5Wipt4PcmZvioC+NqydeXLGGdds+WYvnPmFQ1ocSt0VDCTwInWYfgy6GQA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "351b3a8c-3ff6-4218-9166-fb0749da1654",
                            TwoFactorEnabled = false,
                            UserName = "rabiatopcu123"
                        },
                        new
                        {
                            Id = new Guid("006a6ef0-4418-409c-bb83-a1cb1c988e34"),
                            AccessFailedCount = 0,
                            BirthDay = new DateTime(2024, 5, 29, 2, 39, 29, 57, DateTimeKind.Local).AddTicks(9648),
                            ConcurrencyStamp = "537d9887-d418-4561-8efe-33578d27098e",
                            CreatedOn = new DateTime(2024, 5, 29, 2, 39, 29, 57, DateTimeKind.Local).AddTicks(9649),
                            Email = "yasingok@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Yasin",
                            Gender = 1,
                            LastName = "Gok",
                            LockoutEnabled = false,
                            NormalizedEmail = "YASINGOK@GMAIL.COM",
                            NormalizedUserName = "YASINGOK123",
                            PasswordHash = "AQAAAAIAAYagAAAAEBYOl8YIyZP7fN1XfKZ1ZJZZiZ7k7UzRv7EXs7Oz1qxrZwYJ/aDSabL7zCoGiQr/iA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b26bbd19-1bd1-45b7-8f5f-a0e7d2cf64c9",
                            TwoFactorEnabled = false,
                            UserName = "yasingok123"
                        },
                        new
                        {
                            Id = new Guid("3f597454-e804-4848-8ad7-735a512277f3"),
                            AccessFailedCount = 0,
                            BirthDay = new DateTime(2024, 5, 29, 2, 39, 29, 57, DateTimeKind.Local).AddTicks(9609),
                            ConcurrencyStamp = "a74771a8-184d-4454-97bc-67854610fd7a",
                            CreatedOn = new DateTime(2024, 5, 29, 2, 39, 29, 57, DateTimeKind.Local).AddTicks(9610),
                            Email = "firatcanyanan@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Firat Can",
                            Gender = 1,
                            LastName = "Yanan",
                            LockoutEnabled = false,
                            NormalizedEmail = "FIRATCANYANAN@GMAIL.COM",
                            NormalizedUserName = "FIRATCANYANAN123",
                            PasswordHash = "AQAAAAIAAYagAAAAEEOd9WKya7cBPWLnmD5fM9hrJpANVSaRcmjO2N860HRl38ZwjeNB7Gb0qbg/Pl8UOQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "78ddce78-18f8-4803-ba70-4aa2c0e31272",
                            TwoFactorEnabled = false,
                            UserName = "firatcanyanan123"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.WebApp.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Board", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Entities.Project", "Project")
                        .WithMany("boards")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.BoardUserAssociation", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Identity.AppUser", "AppUser")
                        .WithMany("Boards")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.WebApp.Models.Entities.Board", "Board")
                        .WithMany("Users")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Board");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Comment", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Entities.Job", "Job")
                        .WithMany("Comments")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.WebApp.Models.Identity.AppUser", "Sender")
                        .WithMany("Comments")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Job");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Cost", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Entities.Project", "Project")
                        .WithMany("Costs")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Dependency", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Entities.Job", "Job")
                        .WithMany("Dependencies")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Job", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Entities.Stage", "Stage")
                        .WithMany("Jobs")
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.JobUserAssociation", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Entities.Job", "Job")
                        .WithMany("Users")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.WebApp.Models.Identity.AppUser", "User")
                        .WithMany("Jobs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.ProjectUserAssociation", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Entities.Project", "Project")
                        .WithMany("Users")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.WebApp.Models.Identity.AppUser", "User")
                        .WithMany("Projects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Stage", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Entities.Board", "Board")
                        .WithMany("Stages")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Board");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.SubJob", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Entities.Job", "Job")
                        .WithMany("SubJobs")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Board", b =>
                {
                    b.Navigation("Stages");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Job", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Dependencies");

                    b.Navigation("SubJobs");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Project", b =>
                {
                    b.Navigation("Costs");

                    b.Navigation("Users");

                    b.Navigation("boards");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Stage", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Identity.AppUser", b =>
                {
                    b.Navigation("Boards");

                    b.Navigation("Comments");

                    b.Navigation("Jobs");

                    b.Navigation("Projects");
                });
#pragma warning restore 612, 618
        }
    }
}
