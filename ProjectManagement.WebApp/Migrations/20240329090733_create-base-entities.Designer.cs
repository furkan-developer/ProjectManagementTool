// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectManagement.WebApp.Data;

#nullable disable

namespace ProjectManagement.WebApp.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240329090733_create-base-entities")]
    partial class createbaseentities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("5de56315-2f1d-43fe-a048-af5eebc55224"),
                            RoleId = new Guid("5000e059-d22d-45ff-9fda-6e1c6ddd713a")
                        },
                        new
                        {
                            UserId = new Guid("85661ea0-f42b-486c-8e94-d7b1c47e0479"),
                            RoleId = new Guid("b448a029-79b6-4c74-adb7-c674252232ae")
                        },
                        new
                        {
                            UserId = new Guid("040b4803-d368-498c-b39a-24e00fc11646"),
                            RoleId = new Guid("75e5efee-8bed-43a4-b035-50c547827b44")
                        },
                        new
                        {
                            UserId = new Guid("a50d95be-ff44-48ed-a783-bf3eb335b4fb"),
                            RoleId = new Guid("2a9ba7a8-70ed-4328-9ca2-ad02f19a25fc")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Cost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Costs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2a861c30-05a9-4eea-a543-d862e139d668"),
                            Amount = 500.00m,
                            CreatedOn = new DateTime(2024, 3, 29, 12, 7, 33, 23, DateTimeKind.Local).AddTicks(1729),
                            Date = new DateTime(2024, 3, 29, 12, 7, 33, 23, DateTimeKind.Local).AddTicks(1728),
                            Description = "Sample cost",
                            ProjectId = new Guid("29be38b8-7068-4759-a282-ef566b2a4978")
                        },
                        new
                        {
                            Id = new Guid("d3294dd7-9609-4760-a972-3317b1364e2f"),
                            Amount = 200.00m,
                            CreatedOn = new DateTime(2024, 3, 29, 12, 7, 33, 23, DateTimeKind.Local).AddTicks(1838),
                            Date = new DateTime(2024, 3, 29, 12, 7, 33, 23, DateTimeKind.Local).AddTicks(1837),
                            Description = "Sample cost",
                            ProjectId = new Guid("e955869b-0ab1-4eb3-a89b-4598680e86b1")
                        });
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Dependency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DependsOnJobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("Dependencies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("58a9ea69-1b4c-4c7f-861c-bf29747a12e6"),
                            CreatedOn = new DateTime(2024, 3, 29, 12, 7, 33, 23, DateTimeKind.Local).AddTicks(1679),
                            DependsOnJobId = new Guid("4147dea3-1ef7-439e-b6eb-a1a5ae9e6876"),
                            JobId = new Guid("696060cc-bf69-4ee3-8b92-a737c34c34fa")
                        });
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AssignedTo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StageId");

                    b.ToTable("Jobs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("debee053-3b83-4275-9e4d-151c4a959a25"),
                            AssignedTo = "John Doe",
                            CreatedOn = new DateTime(2024, 3, 29, 12, 7, 33, 23, DateTimeKind.Local).AddTicks(1606),
                            Description = "Design user interface for the blog site",
                            DueDate = new DateTime(2024, 4, 5, 12, 7, 33, 23, DateTimeKind.Local).AddTicks(1602),
                            Priority = 1,
                            ProjectId = new Guid("29be38b8-7068-4759-a282-ef566b2a4978"),
                            StageId = new Guid("f91bc255-ef4c-48eb-a877-eb4916505d90"),
                            StartDate = new DateTime(2024, 3, 29, 12, 7, 33, 23, DateTimeKind.Local).AddTicks(1601),
                            Status = "ToDo",
                            Title = "Design UI"
                        },
                        new
                        {
                            Id = new Guid("4147dea3-1ef7-439e-b6eb-a1a5ae9e6876"),
                            AssignedTo = "John Doe",
                            CreatedOn = new DateTime(2024, 3, 29, 12, 7, 33, 23, DateTimeKind.Local).AddTicks(1615),
                            Description = "Analyze requirements for the stock tracking project",
                            DueDate = new DateTime(2024, 4, 12, 12, 7, 33, 23, DateTimeKind.Local).AddTicks(1614),
                            Priority = 2,
                            ProjectId = new Guid("e955869b-0ab1-4eb3-a89b-4598680e86b1"),
                            StageId = new Guid("bda3c392-acdb-4f9d-9375-abda2189633f"),
                            StartDate = new DateTime(2024, 3, 29, 12, 7, 33, 23, DateTimeKind.Local).AddTicks(1613),
                            Status = "InProgress",
                            Title = "Requirement Analysis"
                        },
                        new
                        {
                            Id = new Guid("696060cc-bf69-4ee3-8b92-a737c34c34fa"),
                            AssignedTo = "John Doe",
                            CreatedOn = new DateTime(2024, 3, 29, 12, 7, 33, 23, DateTimeKind.Local).AddTicks(1620),
                            Description = "Depend job",
                            DueDate = new DateTime(2024, 4, 12, 12, 7, 33, 23, DateTimeKind.Local).AddTicks(1619),
                            Priority = 2,
                            ProjectId = new Guid("e955869b-0ab1-4eb3-a89b-4598680e86b1"),
                            StageId = new Guid("bda3c392-acdb-4f9d-9375-abda2189633f"),
                            StartDate = new DateTime(2024, 3, 29, 12, 7, 33, 23, DateTimeKind.Local).AddTicks(1618),
                            Status = "Pending",
                            Title = "Depend job"
                        });
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = new Guid("29be38b8-7068-4759-a282-ef566b2a4978"),
                            CreatedOn = new DateTime(2024, 3, 29, 12, 7, 33, 22, DateTimeKind.Local).AddTicks(8764),
                            Description = "A project to create a blog site",
                            EndDate = new DateTime(2024, 4, 28, 12, 7, 33, 22, DateTimeKind.Local).AddTicks(8759),
                            ProjectName = "Blog Site Project",
                            StartDate = new DateTime(2024, 3, 29, 12, 7, 33, 22, DateTimeKind.Local).AddTicks(8758),
                            Status = "InProgress"
                        },
                        new
                        {
                            Id = new Guid("e955869b-0ab1-4eb3-a89b-4598680e86b1"),
                            CreatedOn = new DateTime(2024, 3, 29, 12, 7, 33, 22, DateTimeKind.Local).AddTicks(8773),
                            Description = "A project to develop a stock tracking system",
                            EndDate = new DateTime(2024, 5, 28, 12, 7, 33, 22, DateTimeKind.Local).AddTicks(8772),
                            ProjectName = "Stock Tracking Project",
                            StartDate = new DateTime(2024, 3, 29, 12, 7, 33, 22, DateTimeKind.Local).AddTicks(8772),
                            Status = "Planning"
                        });
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.ProjectUserAssociation", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProjectId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectUserAssociation");

                    b.HasData(
                        new
                        {
                            ProjectId = new Guid("29be38b8-7068-4759-a282-ef566b2a4978"),
                            UserId = new Guid("85661ea0-f42b-486c-8e94-d7b1c47e0479")
                        },
                        new
                        {
                            ProjectId = new Guid("29be38b8-7068-4759-a282-ef566b2a4978"),
                            UserId = new Guid("a50d95be-ff44-48ed-a783-bf3eb335b4fb")
                        },
                        new
                        {
                            ProjectId = new Guid("e955869b-0ab1-4eb3-a89b-4598680e86b1"),
                            UserId = new Guid("85661ea0-f42b-486c-8e94-d7b1c47e0479")
                        },
                        new
                        {
                            ProjectId = new Guid("e955869b-0ab1-4eb3-a89b-4598680e86b1"),
                            UserId = new Guid("040b4803-d368-498c-b39a-24e00fc11646")
                        });
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Stage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Stages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bda3c392-acdb-4f9d-9375-abda2189633f"),
                            CreatedOn = new DateTime(2024, 3, 29, 12, 7, 33, 22, DateTimeKind.Local).AddTicks(8889),
                            Description = "Design stage for the blog site project",
                            ProjectId = new Guid("29be38b8-7068-4759-a282-ef566b2a4978"),
                            StageName = "Design"
                        },
                        new
                        {
                            Id = new Guid("f91bc255-ef4c-48eb-a877-eb4916505d90"),
                            CreatedOn = new DateTime(2024, 3, 29, 12, 7, 33, 22, DateTimeKind.Local).AddTicks(8893),
                            Description = "Planning stage for the stock tracking project",
                            ProjectId = new Guid("e955869b-0ab1-4eb3-a89b-4598680e86b1"),
                            StageName = "Planning"
                        });
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Identity.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("5000e059-d22d-45ff-9fda-6e1c6ddd713a"),
                            CreatedOn = new DateTime(2024, 3, 29, 12, 7, 32, 717, DateTimeKind.Local).AddTicks(689),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("b448a029-79b6-4c74-adb7-c674252232ae"),
                            CreatedOn = new DateTime(2024, 3, 29, 12, 7, 32, 717, DateTimeKind.Local).AddTicks(701),
                            Name = "Project Manager",
                            NormalizedName = "PROJECT-MANAGER"
                        },
                        new
                        {
                            Id = new Guid("75e5efee-8bed-43a4-b035-50c547827b44"),
                            CreatedOn = new DateTime(2024, 3, 29, 12, 7, 32, 717, DateTimeKind.Local).AddTicks(703),
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = new Guid("2a9ba7a8-70ed-4328-9ca2-ad02f19a25fc"),
                            CreatedOn = new DateTime(2024, 3, 29, 12, 7, 32, 717, DateTimeKind.Local).AddTicks(706),
                            Name = "Project User",
                            NormalizedName = "PROJECT-USER"
                        });
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Identity.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("5de56315-2f1d-43fe-a048-af5eebc55224"),
                            AccessFailedCount = 0,
                            BirthDay = new DateTime(2024, 3, 29, 12, 7, 32, 717, DateTimeKind.Local).AddTicks(869),
                            ConcurrencyStamp = "fe68ef41-54c7-4f83-a502-b41b973566c3",
                            CreatedOn = new DateTime(2024, 3, 29, 12, 7, 32, 717, DateTimeKind.Local).AddTicks(869),
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Furkan",
                            Gender = 1,
                            LastName = "Aydin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEOv3eVfzxeULgdqgVYciHlzQUA+p2qj5U7r8jpxMSUiVwZoPwYUZ2Oyxx5S55emXvA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a557942a-dbec-4787-84dc-d1a52dbc95e4",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("85661ea0-f42b-486c-8e94-d7b1c47e0479"),
                            AccessFailedCount = 0,
                            BirthDay = new DateTime(2024, 3, 29, 12, 7, 32, 717, DateTimeKind.Local).AddTicks(877),
                            ConcurrencyStamp = "e4fd91b1-285c-440e-a367-2b6fdde8ec22",
                            CreatedOn = new DateTime(2024, 3, 29, 12, 7, 32, 717, DateTimeKind.Local).AddTicks(877),
                            Email = "aliyildiz@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ali",
                            Gender = 1,
                            LastName = "Yildiz ",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALIYILDIZ@GMAIL.COM",
                            NormalizedUserName = "ALIYILDIZ123",
                            PasswordHash = "AQAAAAIAAYagAAAAEPfZ1/UZaivU1MShlg0X2q+JEQWxjkm0ETkVbJYMTZEw3TV0xsMiABDH0uEff6FFfA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9baf8822-efdf-45bb-9be2-eccc1b09a058",
                            TwoFactorEnabled = false,
                            UserName = "aliyildiz123"
                        },
                        new
                        {
                            Id = new Guid("040b4803-d368-498c-b39a-24e00fc11646"),
                            AccessFailedCount = 0,
                            BirthDay = new DateTime(2024, 3, 29, 12, 7, 32, 717, DateTimeKind.Local).AddTicks(883),
                            ConcurrencyStamp = "f5790064-34e7-428d-8ffc-034b16e97b28",
                            CreatedOn = new DateTime(2024, 3, 29, 12, 7, 32, 717, DateTimeKind.Local).AddTicks(883),
                            Email = "ayseyildiz@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ayse",
                            Gender = 2,
                            LastName = "Yildiz",
                            LockoutEnabled = false,
                            NormalizedEmail = "AYSEYILDIZ@GMAIL.COM",
                            NormalizedUserName = "AYSEYILDIZ123",
                            PasswordHash = "AQAAAAIAAYagAAAAEAJ4KyUqDQrYMsnZpiRDOaH0CPN0/hqB3b9+Lo2d7rOyO09kHHrMxZLjwRkOoc4pow==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6276dbba-8ee2-42f7-b375-02fc3bc48ed0",
                            TwoFactorEnabled = false,
                            UserName = "ayseyildiz123"
                        },
                        new
                        {
                            Id = new Guid("a50d95be-ff44-48ed-a783-bf3eb335b4fb"),
                            AccessFailedCount = 0,
                            BirthDay = new DateTime(2024, 3, 29, 12, 7, 32, 717, DateTimeKind.Local).AddTicks(888),
                            ConcurrencyStamp = "307e90ba-391e-4d5b-afe5-c82030123657",
                            CreatedOn = new DateTime(2024, 3, 29, 12, 7, 32, 717, DateTimeKind.Local).AddTicks(889),
                            Email = "esrefyildiz@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Esref",
                            Gender = 2,
                            LastName = "Yildiz",
                            LockoutEnabled = false,
                            NormalizedEmail = "ESREFYILDIZ@GMAIL.COM",
                            NormalizedUserName = "ESREFYILDIZ123",
                            PasswordHash = "AQAAAAIAAYagAAAAEPZVzE0tsxnL2Tn/FEUW3VZXPblPTmvue2G6c3xDtCSZHPLs5jJCTIS+exqNgaxRXQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a90c6d63-2b80-463e-9473-5de94a3b8817",
                            TwoFactorEnabled = false,
                            UserName = "esrefyildiz123"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.WebApp.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Cost", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Entities.Project", "Project")
                        .WithMany("Costs")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Dependency", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Entities.Job", "Job")
                        .WithMany("Dependencies")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Job", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Entities.Project", "Project")
                        .WithMany("Jobs")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.WebApp.Models.Entities.Stage", "Stage")
                        .WithMany("Jobs")
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Project");

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.ProjectUserAssociation", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Entities.Project", "Project")
                        .WithMany("Users")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.WebApp.Models.Identity.AppUser", "User")
                        .WithMany("Projects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Stage", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Entities.Project", "Project")
                        .WithMany("Stages")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Job", b =>
                {
                    b.Navigation("Dependencies");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Project", b =>
                {
                    b.Navigation("Costs");

                    b.Navigation("Jobs");

                    b.Navigation("Stages");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Stage", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Identity.AppUser", b =>
                {
                    b.Navigation("Projects");
                });
#pragma warning restore 612, 618
        }
    }
}
