// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectManagement.WebApp.Data;

#nullable disable

namespace ProjectManagement.WebApp.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240528073011_init-database")]
    partial class initdatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("2afbd0dc-6e7c-4f95-8573-b88451832861"),
                            RoleId = new Guid("76fb22f4-6e8d-42cf-9693-0af1d2b0180e")
                        },
                        new
                        {
                            UserId = new Guid("03f5e372-39a2-4e36-b34a-1a0830d1262a"),
                            RoleId = new Guid("c029b901-6b4d-4528-b8d8-6d29f6f6ea9b")
                        },
                        new
                        {
                            UserId = new Guid("420a7c24-87a7-4ca0-be30-c754fda31bf9"),
                            RoleId = new Guid("c8bd4ca3-220f-4d11-8f38-8fb71500f279")
                        },
                        new
                        {
                            UserId = new Guid("1a2f9943-50bc-40ad-bff8-a7a20d22cb32"),
                            RoleId = new Guid("c8bd4ca3-220f-4d11-8f38-8fb71500f279")
                        },
                        new
                        {
                            UserId = new Guid("dc8ab12a-68fb-468a-a766-e5e7da7f7260"),
                            RoleId = new Guid("c8bd4ca3-220f-4d11-8f38-8fb71500f279")
                        },
                        new
                        {
                            UserId = new Guid("0ad2acad-1619-4992-b977-4a5daf90a614"),
                            RoleId = new Guid("c8bd4ca3-220f-4d11-8f38-8fb71500f279")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Board", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Boards");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2ab3fa67-0253-407e-b9eb-6c7dd83d15a0"),
                            CreatedOn = new DateTime(2024, 5, 28, 10, 30, 10, 115, DateTimeKind.Local).AddTicks(5515),
                            ProjectId = new Guid("ada1db72-e2e4-4090-9123-5287ca0c4c63"),
                            Title = "Front-end board"
                        },
                        new
                        {
                            Id = new Guid("e0b826b6-ca39-4aaf-a312-5c57dfd41b23"),
                            CreatedOn = new DateTime(2024, 5, 28, 10, 30, 10, 115, DateTimeKind.Local).AddTicks(5520),
                            ProjectId = new Guid("ada1db72-e2e4-4090-9123-5287ca0c4c63"),
                            Title = "Back-end board"
                        },
                        new
                        {
                            Id = new Guid("e48423ba-141b-4894-8a30-ad0224d537bc"),
                            CreatedOn = new DateTime(2024, 5, 28, 10, 30, 10, 115, DateTimeKind.Local).AddTicks(5522),
                            ProjectId = new Guid("796454b0-df51-4632-b939-67e684481bdb"),
                            Title = "Analiz"
                        },
                        new
                        {
                            Id = new Guid("e14ee853-2d2e-4dfc-b3f8-4672151389bd"),
                            CreatedOn = new DateTime(2024, 5, 28, 10, 30, 10, 115, DateTimeKind.Local).AddTicks(5525),
                            ProjectId = new Guid("796454b0-df51-4632-b939-67e684481bdb"),
                            Title = "Geliştirme"
                        });
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.BoardUserAssociation", b =>
                {
                    b.Property<Guid>("BoardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BoardId", "AppUserId");

                    b.HasIndex("AppUserId");

                    b.ToTable("BoardUserAssociations");

                    b.HasData(
                        new
                        {
                            BoardId = new Guid("2ab3fa67-0253-407e-b9eb-6c7dd83d15a0"),
                            AppUserId = new Guid("1a2f9943-50bc-40ad-bff8-a7a20d22cb32")
                        },
                        new
                        {
                            BoardId = new Guid("2ab3fa67-0253-407e-b9eb-6c7dd83d15a0"),
                            AppUserId = new Guid("dc8ab12a-68fb-468a-a766-e5e7da7f7260")
                        },
                        new
                        {
                            BoardId = new Guid("2ab3fa67-0253-407e-b9eb-6c7dd83d15a0"),
                            AppUserId = new Guid("0ad2acad-1619-4992-b977-4a5daf90a614")
                        });
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("SenderId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Cost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Costs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b1d06cf9-0b4f-40c9-8415-cb64337ff289"),
                            Amount = 500.00m,
                            CreatedOn = new DateTime(2024, 5, 28, 10, 30, 10, 115, DateTimeKind.Local).AddTicks(6022),
                            Date = new DateTime(2024, 5, 28, 10, 30, 10, 115, DateTimeKind.Local).AddTicks(6021),
                            Description = "Sample cost",
                            ProjectId = new Guid("729b0c34-08f7-4370-a9c6-4e3a9230f166")
                        },
                        new
                        {
                            Id = new Guid("e0f75ca4-5922-4e1c-a801-badb66d9df67"),
                            Amount = 200.00m,
                            CreatedOn = new DateTime(2024, 5, 28, 10, 30, 10, 115, DateTimeKind.Local).AddTicks(6082),
                            Date = new DateTime(2024, 5, 28, 10, 30, 10, 115, DateTimeKind.Local).AddTicks(6081),
                            Description = "Sample cost",
                            ProjectId = new Guid("ada1db72-e2e4-4090-9123-5287ca0c4c63")
                        });
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Dependency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DependsOnJobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("Dependencies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a418e767-f008-47ab-8570-75cfde065ae3"),
                            CreatedOn = new DateTime(2024, 5, 28, 10, 30, 10, 115, DateTimeKind.Local).AddTicks(5977),
                            DependsOnJobId = new Guid("2fcadfb0-7e02-4400-b5c7-2248fb2cf669"),
                            JobId = new Guid("0ccf3a4c-b13e-45c1-986d-94fda1b8a856")
                        });
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<Guid?>("StageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StageId");

                    b.ToTable("Jobs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8367c574-7552-4c3b-bf0a-53b54f6e8753"),
                            CreatedOn = new DateTime(2024, 5, 28, 10, 30, 10, 115, DateTimeKind.Local).AddTicks(5741),
                            Description = "Design user interface for the blog site",
                            DueDate = new DateTime(2024, 6, 4, 10, 30, 10, 115, DateTimeKind.Local).AddTicks(5739),
                            Priority = 0,
                            StageId = new Guid("c45d2652-7d1b-4e8a-b817-598f2397a6c8"),
                            StartDate = new DateTime(2024, 5, 28, 10, 30, 10, 115, DateTimeKind.Local).AddTicks(5738),
                            Title = "Design UI"
                        },
                        new
                        {
                            Id = new Guid("2fcadfb0-7e02-4400-b5c7-2248fb2cf669"),
                            CreatedOn = new DateTime(2024, 5, 28, 10, 30, 10, 115, DateTimeKind.Local).AddTicks(5751),
                            Description = "Analyze requirements for the stock tracking project",
                            DueDate = new DateTime(2024, 6, 11, 10, 30, 10, 115, DateTimeKind.Local).AddTicks(5750),
                            Priority = 1,
                            StageId = new Guid("dc875141-5dbf-467e-8c5b-fd3abf8bb221"),
                            StartDate = new DateTime(2024, 5, 28, 10, 30, 10, 115, DateTimeKind.Local).AddTicks(5749),
                            Title = "Requirement Analysis"
                        },
                        new
                        {
                            Id = new Guid("0ccf3a4c-b13e-45c1-986d-94fda1b8a856"),
                            CreatedOn = new DateTime(2024, 5, 28, 10, 30, 10, 115, DateTimeKind.Local).AddTicks(5757),
                            Description = "Depend job",
                            DueDate = new DateTime(2024, 6, 11, 10, 30, 10, 115, DateTimeKind.Local).AddTicks(5756),
                            Priority = 2,
                            StageId = new Guid("dc875141-5dbf-467e-8c5b-fd3abf8bb221"),
                            StartDate = new DateTime(2024, 5, 28, 10, 30, 10, 115, DateTimeKind.Local).AddTicks(5755),
                            Title = "Depend job"
                        },
                        new
                        {
                            Id = new Guid("4dc0e73d-efbe-441d-880e-6d5c390eb90d"),
                            CreatedOn = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Müşteri ile bir araya gelerek yazılım gereksinimlerinin detaylı bir şekilde incelenmesi",
                            DueDate = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = 1,
                            StageId = new Guid("a0de56bc-2336-4166-a08d-6e53721e5d36"),
                            StartDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Müşteri toplantısı ve gereksinimlerin belirlenmesi"
                        },
                        new
                        {
                            Id = new Guid("bba0d7f4-3479-4983-812a-62dfbf7fce32"),
                            CreatedOn = new DateTime(2024, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Yazılımın işlevsel gereksinimlerinin ayrıntılı bir şekilde belirlenmesi",
                            DueDate = new DateTime(2024, 1, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = 0,
                            StageId = new Guid("a0de56bc-2336-4166-a08d-6e53721e5d36"),
                            StartDate = new DateTime(2024, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Fonksiyonel gereksinimlerin belirlenmesi"
                        },
                        new
                        {
                            Id = new Guid("2d35681d-2073-4bd8-8065-69413bedf698"),
                            CreatedOn = new DateTime(2024, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Yazılımın prototipinin tasarlanması ve kullanıcı geri bildirimlerinin alınması",
                            DueDate = new DateTime(2024, 1, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = 2,
                            StageId = new Guid("0ddb9cd1-3c8a-4820-b9cf-6a1350c57917"),
                            StartDate = new DateTime(2024, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Prototip tasarımı"
                        },
                        new
                        {
                            Id = new Guid("19d0a077-c41e-4e71-980e-8383d45c4be9"),
                            CreatedOn = new DateTime(2024, 1, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Kullanıcı arayüzünün revize edilmesi ve geliştirilmiş bir versiyonunun hazırlanması",
                            DueDate = new DateTime(2024, 1, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = 2,
                            StageId = new Guid("0ddb9cd1-3c8a-4820-b9cf-6a1350c57917"),
                            StartDate = new DateTime(2024, 1, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Arayüz tasarım revizyonu"
                        },
                        new
                        {
                            Id = new Guid("17cc2b0b-1669-4fa6-95c6-a8ea59e3790a"),
                            CreatedOn = new DateTime(2024, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Yazılımın arka uç (backend) API'larının geliştirilmesi ve test edilmesi",
                            DueDate = new DateTime(2024, 1, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = 2,
                            StageId = new Guid("43d5c2fd-177b-49b2-aa6a-af99bc8939d6"),
                            StartDate = new DateTime(2024, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Backend API geliştirme"
                        },
                        new
                        {
                            Id = new Guid("06b8f036-71cd-4742-b837-2339cebe3e77"),
                            CreatedOn = new DateTime(2024, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Kullanıcı arayüzünün ön uç (frontend) bileşenlerinin geliştirilmesi ve entegrasyon testlerinin yapılması",
                            DueDate = new DateTime(2024, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = 1,
                            StageId = new Guid("43d5c2fd-177b-49b2-aa6a-af99bc8939d6"),
                            StartDate = new DateTime(2024, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Frontend komponent geliştirme"
                        },
                        new
                        {
                            Id = new Guid("c1618ffb-52a1-4d9b-8207-1bcab7aac751"),
                            CreatedOn = new DateTime(2024, 1, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Yazılımın test edilmesi için birinci aşama test senaryolarının hazırlanması",
                            DueDate = new DateTime(2024, 1, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = 0,
                            StageId = new Guid("420c7020-5cbe-42d0-8d3d-dad93c32503c"),
                            StartDate = new DateTime(2024, 1, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Birinci aşama test senaryolarının hazırlanması"
                        },
                        new
                        {
                            Id = new Guid("f4228397-4833-4175-895d-15c40af2dccf"),
                            CreatedOn = new DateTime(2024, 1, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Yazılımın farklı bileşenlerinin bir araya getirilerek sistem entegrasyon testlerinin yapılması",
                            DueDate = new DateTime(2024, 1, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = 1,
                            StageId = new Guid("420c7020-5cbe-42d0-8d3d-dad93c32503c"),
                            StartDate = new DateTime(2024, 1, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Sistem entegrasyon testlerinin yapılması"
                        },
                        new
                        {
                            Id = new Guid("16f200b7-defc-4416-8dc1-09b4d5978baf"),
                            CreatedOn = new DateTime(2024, 5, 28, 10, 30, 10, 115, DateTimeKind.Local).AddTicks(5866),
                            Description = "Mevcut sistem ve iş süreçlerinin detaylı bir şekilde incelenmesi",
                            DueDate = new DateTime(2024, 1, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = 1,
                            StageId = new Guid("a0de56bc-2336-4166-a08d-6e53721e5d36"),
                            StartDate = new DateTime(2024, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Mevcut sistem analizi"
                        },
                        new
                        {
                            Id = new Guid("b7c66623-82b1-4497-9830-4a803d8b6321"),
                            CreatedOn = new DateTime(2024, 5, 28, 10, 30, 10, 115, DateTimeKind.Local).AddTicks(5873),
                            Description = "Müşteri gereksinimlerinin toplanması ve analiz edilmesi",
                            DueDate = new DateTime(2024, 1, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = 0,
                            StageId = new Guid("a0de56bc-2336-4166-a08d-6e53721e5d36"),
                            StartDate = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Müşteri ihtiyaçlarının belirlenmesi"
                        },
                        new
                        {
                            Id = new Guid("ed2f4959-6caa-40dd-83c9-a9cf21560443"),
                            CreatedOn = new DateTime(2024, 5, 28, 10, 30, 10, 115, DateTimeKind.Local).AddTicks(5878),
                            Description = "Yapılan analiz çalışmalarının sonuçlarının detaylı bir şekilde dokümante edilmesi",
                            DueDate = new DateTime(2024, 1, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = 0,
                            StageId = new Guid("a0de56bc-2336-4166-a08d-6e53721e5d36"),
                            StartDate = new DateTime(2024, 1, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Analiz sonuçlarının dokümantasyonu"
                        },
                        new
                        {
                            Id = new Guid("bde2d258-4c86-459f-88d9-f5d4f0f2b599"),
                            CreatedOn = new DateTime(2024, 5, 28, 10, 30, 10, 115, DateTimeKind.Local).AddTicks(5883),
                            Description = "Yazılımın kullanıcı arayüzü tasarımının ilk mockup'ları oluşturulması",
                            DueDate = new DateTime(2024, 1, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = 1,
                            StageId = new Guid("0ddb9cd1-3c8a-4820-b9cf-6a1350c57917"),
                            StartDate = new DateTime(2024, 1, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Kullanıcı arayüzünün mockup'larının hazırlanması"
                        },
                        new
                        {
                            Id = new Guid("1aaac5ba-40e7-4917-81de-8d635d7160ef"),
                            CreatedOn = new DateTime(2024, 5, 28, 10, 30, 10, 115, DateTimeKind.Local).AddTicks(5887),
                            Description = "Kullanılacak renklerin ve renk paletinin belirlenmesi",
                            DueDate = new DateTime(2024, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = 2,
                            StageId = new Guid("0ddb9cd1-3c8a-4820-b9cf-6a1350c57917"),
                            StartDate = new DateTime(2024, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Arayüz tasarımı için renk paletinin belirlenmesi"
                        },
                        new
                        {
                            Id = new Guid("ae38e42e-b5af-4cc8-8d15-b171807a9e91"),
                            CreatedOn = new DateTime(2024, 5, 28, 10, 30, 10, 115, DateTimeKind.Local).AddTicks(5892),
                            Description = "Kullanıcı arayüzünün kullanılabilirliğinin test edilmesi ve geri bildirimlerin alınması",
                            DueDate = new DateTime(2024, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = 2,
                            StageId = new Guid("0ddb9cd1-3c8a-4820-b9cf-6a1350c57917"),
                            StartDate = new DateTime(2024, 1, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Arayüzün kullanılabilirlik testlerinin yapılması"
                        },
                        new
                        {
                            Id = new Guid("c3e7e194-fa5f-45ac-829f-47c3550229c4"),
                            CreatedOn = new DateTime(2024, 5, 28, 10, 30, 10, 115, DateTimeKind.Local).AddTicks(5896),
                            Description = "Tasarım aşamasında alınan geri bildirimler doğrultusunda gerekli revizyonların yapılması",
                            DueDate = new DateTime(2024, 1, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = 2,
                            StageId = new Guid("0ddb9cd1-3c8a-4820-b9cf-6a1350c57917"),
                            StartDate = new DateTime(2024, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Tasarım revizyonu"
                        },
                        new
                        {
                            Id = new Guid("231ce421-7ccf-4145-be51-e00f0713cb6a"),
                            CreatedOn = new DateTime(2024, 5, 28, 10, 30, 10, 115, DateTimeKind.Local).AddTicks(5901),
                            Description = "Kullanıcı arayüzünde kullanılacak animasyonların hazırlanması ve uygulanması",
                            DueDate = new DateTime(2024, 1, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Priority = 2,
                            StageId = new Guid("0ddb9cd1-3c8a-4820-b9cf-6a1350c57917"),
                            StartDate = new DateTime(2024, 1, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Arayüz animasyonlarının hazırlanması"
                        });
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.JobUserAssociation", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "JobId");

                    b.HasIndex("JobId");

                    b.ToTable("JobUserAssociations");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = new Guid("729b0c34-08f7-4370-a9c6-4e3a9230f166"),
                            CreatedOn = new DateTime(2024, 5, 28, 10, 30, 10, 115, DateTimeKind.Local).AddTicks(5214),
                            Description = "A project to create a blog site",
                            EndDate = new DateTime(2024, 6, 27, 10, 30, 10, 115, DateTimeKind.Local).AddTicks(5206),
                            ProjectName = "Blog Site Project",
                            StartDate = new DateTime(2024, 5, 28, 10, 30, 10, 115, DateTimeKind.Local).AddTicks(5205)
                        },
                        new
                        {
                            Id = new Guid("ada1db72-e2e4-4090-9123-5287ca0c4c63"),
                            CreatedOn = new DateTime(2024, 5, 28, 10, 30, 10, 115, DateTimeKind.Local).AddTicks(5221),
                            Description = "A project to develop a stock tracking system",
                            EndDate = new DateTime(2024, 7, 27, 10, 30, 10, 115, DateTimeKind.Local).AddTicks(5220),
                            ProjectName = "Stock Tracking Project",
                            StartDate = new DateTime(2024, 5, 28, 10, 30, 10, 115, DateTimeKind.Local).AddTicks(5219)
                        },
                        new
                        {
                            Id = new Guid("796454b0-df51-4632-b939-67e684481bdb"),
                            CreatedOn = new DateTime(2024, 5, 28, 10, 30, 10, 115, DateTimeKind.Local).AddTicks(5228),
                            Description = "Bir yazılım ürününün geliştirilmesi",
                            EndDate = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProjectName = "Yazılım Projesi",
                            StartDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("4a316be8-ab81-4847-a201-13fc064c9bb6"),
                            CreatedOn = new DateTime(2024, 5, 28, 10, 30, 10, 115, DateTimeKind.Local).AddTicks(5235),
                            Description = "Yeni bir ürünün pazarlama stratejisinin oluşturulması",
                            EndDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProjectName = "Pazarlama Kampanyası",
                            StartDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("d7268817-9b98-4cea-8d90-8d30b6116eb3"),
                            CreatedOn = new DateTime(2024, 5, 28, 10, 30, 10, 115, DateTimeKind.Local).AddTicks(5239),
                            Description = "Yeni bir ürünün tasarım sürecinin yürütülmesi",
                            EndDate = new DateTime(2024, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProjectName = "Yeni Ürün Tasarımı",
                            StartDate = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.ProjectUserAssociation", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProjectId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectUserAssociations");

                    b.HasData(
                        new
                        {
                            ProjectId = new Guid("729b0c34-08f7-4370-a9c6-4e3a9230f166"),
                            UserId = new Guid("03f5e372-39a2-4e36-b34a-1a0830d1262a")
                        },
                        new
                        {
                            ProjectId = new Guid("ada1db72-e2e4-4090-9123-5287ca0c4c63"),
                            UserId = new Guid("1a2f9943-50bc-40ad-bff8-a7a20d22cb32")
                        },
                        new
                        {
                            ProjectId = new Guid("ada1db72-e2e4-4090-9123-5287ca0c4c63"),
                            UserId = new Guid("03f5e372-39a2-4e36-b34a-1a0830d1262a")
                        },
                        new
                        {
                            ProjectId = new Guid("ada1db72-e2e4-4090-9123-5287ca0c4c63"),
                            UserId = new Guid("420a7c24-87a7-4ca0-be30-c754fda31bf9")
                        },
                        new
                        {
                            ProjectId = new Guid("ada1db72-e2e4-4090-9123-5287ca0c4c63"),
                            UserId = new Guid("dc8ab12a-68fb-468a-a766-e5e7da7f7260")
                        },
                        new
                        {
                            ProjectId = new Guid("ada1db72-e2e4-4090-9123-5287ca0c4c63"),
                            UserId = new Guid("0ad2acad-1619-4992-b977-4a5daf90a614")
                        },
                        new
                        {
                            ProjectId = new Guid("796454b0-df51-4632-b939-67e684481bdb"),
                            UserId = new Guid("03f5e372-39a2-4e36-b34a-1a0830d1262a")
                        },
                        new
                        {
                            ProjectId = new Guid("796454b0-df51-4632-b939-67e684481bdb"),
                            UserId = new Guid("dc8ab12a-68fb-468a-a766-e5e7da7f7260")
                        });
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Stage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BoardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.ToTable("Stages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dc875141-5dbf-467e-8c5b-fd3abf8bb221"),
                            BoardId = new Guid("2ab3fa67-0253-407e-b9eb-6c7dd83d15a0"),
                            CreatedOn = new DateTime(2024, 5, 28, 10, 30, 10, 115, DateTimeKind.Local).AddTicks(5610),
                            Description = "Design stage for the blog site project",
                            StageName = "Home Page"
                        },
                        new
                        {
                            Id = new Guid("c45d2652-7d1b-4e8a-b817-598f2397a6c8"),
                            BoardId = new Guid("2ab3fa67-0253-407e-b9eb-6c7dd83d15a0"),
                            CreatedOn = new DateTime(2024, 5, 28, 10, 30, 10, 115, DateTimeKind.Local).AddTicks(5617),
                            Description = "Planning stage for the stock tracking project",
                            StageName = "Supplier Page"
                        },
                        new
                        {
                            Id = new Guid("a0de56bc-2336-4166-a08d-6e53721e5d36"),
                            BoardId = new Guid("e14ee853-2d2e-4dfc-b3f8-4672151389bd"),
                            CreatedOn = new DateTime(2024, 5, 28, 10, 30, 10, 115, DateTimeKind.Local).AddTicks(5624),
                            Description = "Geliştirme aşaması için analiz aşaması",
                            StageName = "Analiz"
                        },
                        new
                        {
                            Id = new Guid("0ddb9cd1-3c8a-4820-b9cf-6a1350c57917"),
                            BoardId = new Guid("e14ee853-2d2e-4dfc-b3f8-4672151389bd"),
                            CreatedOn = new DateTime(2024, 5, 28, 10, 30, 10, 115, DateTimeKind.Local).AddTicks(5627),
                            Description = "Geliştirme aşaması için tasarım aşaması",
                            StageName = "Tasarım"
                        },
                        new
                        {
                            Id = new Guid("43d5c2fd-177b-49b2-aa6a-af99bc8939d6"),
                            BoardId = new Guid("e14ee853-2d2e-4dfc-b3f8-4672151389bd"),
                            CreatedOn = new DateTime(2024, 5, 28, 10, 30, 10, 115, DateTimeKind.Local).AddTicks(5630),
                            Description = "Geliştirme aşaması için kodlama aşaması",
                            StageName = "Kodlama"
                        },
                        new
                        {
                            Id = new Guid("420c7020-5cbe-42d0-8d3d-dad93c32503c"),
                            BoardId = new Guid("e14ee853-2d2e-4dfc-b3f8-4672151389bd"),
                            CreatedOn = new DateTime(2024, 5, 28, 10, 30, 10, 115, DateTimeKind.Local).AddTicks(5639),
                            Description = "Geliştirme aşaması için test aşaması",
                            StageName = "Test"
                        });
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.SubJob", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("bit");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("SubJobs");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Identity.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("76fb22f4-6e8d-42cf-9693-0af1d2b0180e"),
                            CreatedOn = new DateTime(2024, 5, 28, 10, 30, 9, 506, DateTimeKind.Local).AddTicks(7806),
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("c029b901-6b4d-4528-b8d8-6d29f6f6ea9b"),
                            CreatedOn = new DateTime(2024, 5, 28, 10, 30, 9, 506, DateTimeKind.Local).AddTicks(7822),
                            Name = "project-manager",
                            NormalizedName = "PROJECT-MANAGER"
                        },
                        new
                        {
                            Id = new Guid("a5acdb31-47b7-4a48-8e45-9042cc7b91a2"),
                            CreatedOn = new DateTime(2024, 5, 28, 10, 30, 9, 506, DateTimeKind.Local).AddTicks(7826),
                            Name = "user",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = new Guid("c8bd4ca3-220f-4d11-8f38-8fb71500f279"),
                            CreatedOn = new DateTime(2024, 5, 28, 10, 30, 9, 506, DateTimeKind.Local).AddTicks(7829),
                            Name = "project-user",
                            NormalizedName = "PROJECT-USER"
                        });
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Identity.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2afbd0dc-6e7c-4f95-8573-b88451832861"),
                            AccessFailedCount = 0,
                            BirthDay = new DateTime(2024, 5, 28, 10, 30, 9, 506, DateTimeKind.Local).AddTicks(8352),
                            ConcurrencyStamp = "33b06a61-6daa-44a5-8ce4-91aa6f24d337",
                            CreatedOn = new DateTime(2024, 5, 28, 10, 30, 9, 506, DateTimeKind.Local).AddTicks(8353),
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Furkan",
                            Gender = 1,
                            LastName = "Aydin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEPN+Yalz5e8jGdPA+5jRbYKPWqlVU/AAnW+h8RSZxAgQNyrmqvPlDX/u5rSYV4A+BQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "998b9193-6ec6-4fbd-bca5-45f1469fc392",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("03f5e372-39a2-4e36-b34a-1a0830d1262a"),
                            AccessFailedCount = 0,
                            BirthDay = new DateTime(2024, 5, 28, 10, 30, 9, 506, DateTimeKind.Local).AddTicks(8376),
                            ConcurrencyStamp = "6655acca-8190-44ad-8c2d-a87f804282a0",
                            CreatedOn = new DateTime(2024, 5, 28, 10, 30, 9, 506, DateTimeKind.Local).AddTicks(8376),
                            Email = "aliyildiz@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ali",
                            Gender = 1,
                            LastName = "Yildiz ",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALIYILDIZ@GMAIL.COM",
                            NormalizedUserName = "ALIYILDIZ123",
                            PasswordHash = "AQAAAAIAAYagAAAAENUQP2two63rQ40nz8S0LI+7Q15TPSGzoZV1R9F6UnMe5UC98BgoFPb+SkV6Lv2ylA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a5b4d684-026a-4a29-89d4-1a074bd38460",
                            TwoFactorEnabled = false,
                            UserName = "aliyildiz123"
                        },
                        new
                        {
                            Id = new Guid("420a7c24-87a7-4ca0-be30-c754fda31bf9"),
                            AccessFailedCount = 0,
                            BirthDay = new DateTime(2024, 5, 28, 10, 30, 9, 506, DateTimeKind.Local).AddTicks(8396),
                            ConcurrencyStamp = "0b028e71-8f59-4678-aa3e-781f5b1ca017",
                            CreatedOn = new DateTime(2024, 5, 28, 10, 30, 9, 506, DateTimeKind.Local).AddTicks(8397),
                            Email = "ayseyildiz@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ayse",
                            Gender = 2,
                            LastName = "Yildiz",
                            LockoutEnabled = false,
                            NormalizedEmail = "AYSEYILDIZ@GMAIL.COM",
                            NormalizedUserName = "AYSEYILDIZ123",
                            PasswordHash = "AQAAAAIAAYagAAAAEDkF8D3Arem+AjiufmF0lAZfVK0rfLNFg7zOWlr4xTx9m36/ZnK0Bw6Y6soKSW6rSA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5dfe1b65-8e97-49a0-9332-869acd477cf3",
                            TwoFactorEnabled = false,
                            UserName = "ayseyildiz123"
                        },
                        new
                        {
                            Id = new Guid("1a2f9943-50bc-40ad-bff8-a7a20d22cb32"),
                            AccessFailedCount = 0,
                            BirthDay = new DateTime(2024, 5, 28, 10, 30, 9, 506, DateTimeKind.Local).AddTicks(8404),
                            ConcurrencyStamp = "d85bc7fa-e1d8-4572-a621-d97120ab016e",
                            CreatedOn = new DateTime(2024, 5, 28, 10, 30, 9, 506, DateTimeKind.Local).AddTicks(8405),
                            Email = "esrefyildiz@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Esref",
                            Gender = 2,
                            LastName = "Yildiz",
                            LockoutEnabled = false,
                            NormalizedEmail = "ESREFYILDIZ@GMAIL.COM",
                            NormalizedUserName = "ESREFYILDIZ123",
                            PasswordHash = "AQAAAAIAAYagAAAAELSzkQ0Q8WxpfwLx2j5yD0xzQ/vYIlLEN6tndS7/b1snw06GS/VTSV7V3VBjdYmY9Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c492c864-e027-4435-83ce-4a2ba220fc5b",
                            TwoFactorEnabled = false,
                            UserName = "esrefyildiz123"
                        },
                        new
                        {
                            Id = new Guid("dc8ab12a-68fb-468a-a766-e5e7da7f7260"),
                            AccessFailedCount = 0,
                            BirthDay = new DateTime(2024, 5, 28, 10, 30, 9, 506, DateTimeKind.Local).AddTicks(8412),
                            ConcurrencyStamp = "77f36f32-fe30-470c-8cd2-7f1b44c6d05d",
                            CreatedOn = new DateTime(2024, 5, 28, 10, 30, 9, 506, DateTimeKind.Local).AddTicks(8413),
                            Email = "furkanaydin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Furkan",
                            Gender = 1,
                            LastName = "Aydin",
                            LockoutEnabled = false,
                            NormalizedEmail = "FURKANAYDIN@GMAIL.COM",
                            NormalizedUserName = "FURKANAYDIN123",
                            PasswordHash = "AQAAAAIAAYagAAAAED6ZNoIvEwhWaInCsGHcwOq5bT6B8/azt3AdpXrqLioeZYaPl7951f51eEilNcRVew==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bd854ec8-f897-48f4-b798-496661fdf7ff",
                            TwoFactorEnabled = false,
                            UserName = "furkanaydin123"
                        },
                        new
                        {
                            Id = new Guid("0ad2acad-1619-4992-b977-4a5daf90a614"),
                            AccessFailedCount = 0,
                            BirthDay = new DateTime(2024, 5, 28, 10, 30, 9, 506, DateTimeKind.Local).AddTicks(8422),
                            ConcurrencyStamp = "ace24aed-5d38-4bf5-8a6e-6d885e7cc301",
                            CreatedOn = new DateTime(2024, 5, 28, 10, 30, 9, 506, DateTimeKind.Local).AddTicks(8423),
                            Email = "firatcanyanan@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Firat Can",
                            Gender = 1,
                            LastName = "Yanan",
                            LockoutEnabled = false,
                            NormalizedEmail = "FIRATCANYANAN@GMAIL.COM",
                            NormalizedUserName = "FIRATCANYANAN123",
                            PasswordHash = "AQAAAAIAAYagAAAAEJL3UHrb8vOq0H/tG5aEXdSbwGANEvChnL7UmzawkMd77nt6yAJDdhzd2H9yIpgEpA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ea88d5f0-8197-486a-9c12-ace4b6664e00",
                            TwoFactorEnabled = false,
                            UserName = "firatcanyanan123"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.WebApp.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Board", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Entities.Project", "Project")
                        .WithMany("boards")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.BoardUserAssociation", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Identity.AppUser", "AppUser")
                        .WithMany("Boards")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.WebApp.Models.Entities.Board", "Board")
                        .WithMany("Users")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Board");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Comment", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Entities.Job", "Job")
                        .WithMany("Comments")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.WebApp.Models.Identity.AppUser", "Sender")
                        .WithMany("Comments")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Job");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Cost", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Entities.Project", "Project")
                        .WithMany("Costs")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Dependency", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Entities.Job", "Job")
                        .WithMany("Dependencies")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Job", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Entities.Stage", "Stage")
                        .WithMany("Jobs")
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.JobUserAssociation", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Entities.Job", "Job")
                        .WithMany("Users")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.WebApp.Models.Identity.AppUser", "User")
                        .WithMany("Jobs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.ProjectUserAssociation", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Entities.Project", "Project")
                        .WithMany("Users")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.WebApp.Models.Identity.AppUser", "User")
                        .WithMany("Projects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Stage", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Entities.Board", "Board")
                        .WithMany("Stages")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Board");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.SubJob", b =>
                {
                    b.HasOne("ProjectManagement.WebApp.Models.Entities.Job", "Job")
                        .WithMany("SubJobs")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Board", b =>
                {
                    b.Navigation("Stages");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Job", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Dependencies");

                    b.Navigation("SubJobs");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Project", b =>
                {
                    b.Navigation("Costs");

                    b.Navigation("Users");

                    b.Navigation("boards");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Entities.Stage", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("ProjectManagement.WebApp.Models.Identity.AppUser", b =>
                {
                    b.Navigation("Boards");

                    b.Navigation("Comments");

                    b.Navigation("Jobs");

                    b.Navigation("Projects");
                });
#pragma warning restore 612, 618
        }
    }
}
